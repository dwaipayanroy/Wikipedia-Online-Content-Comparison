#ifndef java_lang_String_H
#define java_lang_String_H

#include "java/lang/Object.h"

namespace java {
  namespace io {
    class UnsupportedEncodingException;
    class Serializable;
  }
  namespace util {
    class Locale;
    class Comparator;
  }
  namespace lang {
    class StringBuilder;
    class Iterable;
    class Comparable;
    class String;
    class CharSequence;
    class StringBuffer;
    class Class;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class String : public ::java::lang::Object {
     public:
      enum {
        mid_init$_8e1955e8a9db094a,
        mid_init$_1c5262b40387c60e,
        mid_init$_046969b1a2d73af0,
        mid_init$_8367e08c35d968ea,
        mid_init$_430360821bfbd749,
        mid_init$_f524e4dbb1d21f88,
        mid_init$_e71b2fd94d730932,
        mid_init$_7fc0bf56a271cd51,
        mid_init$_ea931aae960c632d,
        mid_init$_004ed92430453f20,
        mid_init$_3d7f3bb6d05f5592,
        mid_init$_8b0637103d7d4069,
        mid_charAt_cb77cd15fd3c4542,
        mid_codePointAt_31c387e1be87ebd7,
        mid_codePointBefore_31c387e1be87ebd7,
        mid_codePointCount_28fd57ae44f76a2e,
        mid_compareTo_354c0569c95d5178,
        mid_compareToIgnoreCase_354c0569c95d5178,
        mid_concat_744f4d1a4f853475,
        mid_contains_298703078a221be0,
        mid_contentEquals_abab04c66aee6ffc,
        mid_contentEquals_298703078a221be0,
        mid_copyValueOf_5d0b9e33120ea8bd,
        mid_copyValueOf_b1d65d72dc31213d,
        mid_endsWith_98daff2c4e381e5e,
        mid_equals_95c645439e1de637,
        mid_equalsIgnoreCase_98daff2c4e381e5e,
        mid_format_2795f9abbcf83f06,
        mid_format_a96558b0ec02bf3b,
        mid_getBytes_7bddfff143a4e7e0,
        mid_getBytes_0ba6e02d7c47101f,
        mid_getBytes_7d51e7b722543ba9,
        mid_getChars_b938b18cf768e5fb,
        mid_hashCode_ebe7ab370a509c13,
        mid_indexOf_354c0569c95d5178,
        mid_indexOf_31c387e1be87ebd7,
        mid_indexOf_7b98af938793e116,
        mid_indexOf_28fd57ae44f76a2e,
        mid_intern_a59eabb26a802fa9,
        mid_isEmpty_b61c635e27ed4ce7,
        mid_join_181e31aac4c93dbe,
        mid_join_956fd2ff774e0e95,
        mid_lastIndexOf_354c0569c95d5178,
        mid_lastIndexOf_31c387e1be87ebd7,
        mid_lastIndexOf_7b98af938793e116,
        mid_lastIndexOf_28fd57ae44f76a2e,
        mid_length_ebe7ab370a509c13,
        mid_matches_98daff2c4e381e5e,
        mid_offsetByCodePoints_28fd57ae44f76a2e,
        mid_regionMatches_62f79f83534dc222,
        mid_regionMatches_ea98d5bd1d8fe76e,
        mid_replace_7ed88dc953f7a6c6,
        mid_replace_08c1741aeeb71a37,
        mid_replaceAll_b7ab710c19669f80,
        mid_replaceFirst_b7ab710c19669f80,
        mid_split_9158ca7d19daa133,
        mid_split_ea56acca0404d921,
        mid_startsWith_98daff2c4e381e5e,
        mid_startsWith_4560b9e7a3d978b1,
        mid_subSequence_2ce1d56f2beed3ed,
        mid_substring_051f7871497adf6a,
        mid_substring_d1f393259271740d,
        mid_toCharArray_524cd17fedb51d3c,
        mid_toLowerCase_a59eabb26a802fa9,
        mid_toLowerCase_622432e5955e8c71,
        mid_toString_a59eabb26a802fa9,
        mid_toUpperCase_a59eabb26a802fa9,
        mid_toUpperCase_622432e5955e8c71,
        mid_trim_a59eabb26a802fa9,
        mid_valueOf_5d0b9e33120ea8bd,
        mid_valueOf_d8d62802d35b75e2,
        mid_valueOf_bc8ad0ab0c8838c1,
        mid_valueOf_bac4d24757628c01,
        mid_valueOf_224101a44987a135,
        mid_valueOf_051f7871497adf6a,
        mid_valueOf_10f7f9bb8c5e65c2,
        mid_valueOf_128e65fb787eb87d,
        mid_valueOf_b1d65d72dc31213d,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit String(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      String(const String& obj) : ::java::lang::Object(obj) {}

      static ::java::util::Comparator *CASE_INSENSITIVE_ORDER;

      String();
      String(const ::java::lang::StringBuffer &);
      String(const ::java::lang::StringBuilder &);
      String(const JArray< jbyte > &);
      String(const JArray< jchar > &);
      String(const JArray< jbyte > &, const String &);
      String(const JArray< jbyte > &, jint);
      String(const JArray< jbyte > &, jint, jint);
      String(const JArray< jchar > &, jint, jint);
      String(const JArray< jint > &, jint, jint);
      String(const JArray< jbyte > &, jint, jint, const String &);
      String(const JArray< jbyte > &, jint, jint, jint);

      jchar charAt(jint) const;
      jint codePointAt(jint) const;
      jint codePointBefore(jint) const;
      jint codePointCount(jint, jint) const;
      jint compareTo(const String &) const;
      jint compareToIgnoreCase(const String &) const;
      String concat(const String &) const;
      jboolean contains(const ::java::lang::CharSequence &) const;
      jboolean contentEquals(const ::java::lang::StringBuffer &) const;
      jboolean contentEquals(const ::java::lang::CharSequence &) const;
      static String copyValueOf(const JArray< jchar > &);
      static String copyValueOf(const JArray< jchar > &, jint, jint);
      jboolean endsWith(const String &) const;
      jboolean equals(const ::java::lang::Object &) const;
      jboolean equalsIgnoreCase(const String &) const;
      static String format(const String &, const JArray< ::java::lang::Object > &);
      static String format(const ::java::util::Locale &, const String &, const JArray< ::java::lang::Object > &);
      JArray< jbyte > getBytes() const;
      JArray< jbyte > getBytes(const String &) const;
      void getBytes(jint, jint, const JArray< jbyte > &, jint) const;
      void getChars(jint, jint, const JArray< jchar > &, jint) const;
      jint hashCode() const;
      jint indexOf(const String &) const;
      jint indexOf(jint) const;
      jint indexOf(const String &, jint) const;
      jint indexOf(jint, jint) const;
      String intern() const;
      jboolean isEmpty() const;
      static String join(const ::java::lang::CharSequence &, const JArray< ::java::lang::CharSequence > &);
      static String join(const ::java::lang::CharSequence &, const ::java::lang::Iterable &);
      jint lastIndexOf(const String &) const;
      jint lastIndexOf(jint) const;
      jint lastIndexOf(const String &, jint) const;
      jint lastIndexOf(jint, jint) const;
      jint length() const;
      jboolean matches(const String &) const;
      jint offsetByCodePoints(jint, jint) const;
      jboolean regionMatches(jint, const String &, jint, jint) const;
      jboolean regionMatches(jboolean, jint, const String &, jint, jint) const;
      String replace(jchar, jchar) const;
      String replace(const ::java::lang::CharSequence &, const ::java::lang::CharSequence &) const;
      String replaceAll(const String &, const String &) const;
      String replaceFirst(const String &, const String &) const;
      JArray< String > split(const String &) const;
      JArray< String > split(const String &, jint) const;
      jboolean startsWith(const String &) const;
      jboolean startsWith(const String &, jint) const;
      ::java::lang::CharSequence subSequence(jint, jint) const;
      String substring(jint) const;
      String substring(jint, jint) const;
      JArray< jchar > toCharArray() const;
      String toLowerCase() const;
      String toLowerCase(const ::java::util::Locale &) const;
      String toString() const;
      String toUpperCase() const;
      String toUpperCase(const ::java::util::Locale &) const;
      String trim() const;
      static String valueOf(const JArray< jchar > &);
      static String valueOf(jboolean);
      static String valueOf(jchar);
      static String valueOf(jdouble);
      static String valueOf(jfloat);
      static String valueOf(jint);
      static String valueOf(const ::java::lang::Object &);
      static String valueOf(jlong);
      static String valueOf(const JArray< jchar > &, jint, jint);
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyType_Def PY_TYPE_DEF(String);
    extern PyTypeObject *PY_TYPE(String);

    class t_String {
    public:
      PyObject_HEAD
      String object;
      static PyObject *wrap_Object(const String&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
