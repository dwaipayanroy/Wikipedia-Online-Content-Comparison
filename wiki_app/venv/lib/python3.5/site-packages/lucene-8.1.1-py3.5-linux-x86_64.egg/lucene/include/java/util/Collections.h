#ifndef java_util_Collections_H
#define java_util_Collections_H

#include "java/lang/Object.h"

namespace java {
  namespace util {
    class Set;
    class NavigableMap;
    class Collection;
    class List;
    class Queue;
    class SortedMap;
    class Iterator;
    class Random;
    class ArrayList;
    class Comparator;
    class NavigableSet;
    class Deque;
    class Enumeration;
    class Map;
    class ListIterator;
    class SortedSet;
  }
  namespace lang {
    class Boolean;
    class Comparable;
    class Class;
  }
}
template<class T> class JArray;

namespace java {
  namespace util {

    class Collections : public ::java::lang::Object {
     public:
      enum {
        mid_addAll_5f5115bfc42c7446,
        mid_asLifoQueue_4c72f446cc314b7c,
        mid_binarySearch_d3b99763011d58b4,
        mid_binarySearch_49e2b6083246af31,
        mid_checkedCollection_b456bff3c9760658,
        mid_checkedList_dc270e2096d173bb,
        mid_checkedMap_c372afa9af76821f,
        mid_checkedNavigableMap_09e7612b92390926,
        mid_checkedNavigableSet_5824f1e22f3a6925,
        mid_checkedQueue_af79cdbaae1d2fd5,
        mid_checkedSet_5515bd0369cb6f4b,
        mid_checkedSortedMap_53677491c965dae1,
        mid_checkedSortedSet_4b84acf036a8408b,
        mid_copy_5a4a61cc09b292e2,
        mid_disjoint_fdfb84f149158fb7,
        mid_emptyEnumeration_2900c5f1adb55e5b,
        mid_emptyIterator_44488a5d2e640930,
        mid_emptyList_3ca2fd68c33ee839,
        mid_emptyListIterator_36a99a61b6d41c68,
        mid_emptyMap_776657198fbc9f41,
        mid_emptyNavigableMap_1e21f10a89a28af9,
        mid_emptyNavigableSet_9707bc0ec9fa4436,
        mid_emptySet_b47526fcab3b3190,
        mid_emptySortedMap_f56de53119692d63,
        mid_emptySortedSet_3dc71e9363b6dad2,
        mid_enumeration_b44e565e70e6e3ea,
        mid_fill_45ee0d4f06930521,
        mid_frequency_9c878b53c2008b5d,
        mid_indexOfSubList_5a79cbb711c9d65b,
        mid_lastIndexOfSubList_5a79cbb711c9d65b,
        mid_list_d219dddb4e2e8685,
        mid_max_ec3ecfe045e8b4ce,
        mid_max_6928c61a67420ed3,
        mid_min_ec3ecfe045e8b4ce,
        mid_min_6928c61a67420ed3,
        mid_nCopies_59e3ed1799b20fb6,
        mid_newSetFromMap_9c90dfc8cfe8ba60,
        mid_replaceAll_f1278b2d523bed00,
        mid_reverse_9d6f77802c55d31e,
        mid_reverseOrder_b48d249fac7e0652,
        mid_reverseOrder_dcd3222898119b69,
        mid_rotate_f5296008f5e6fd4f,
        mid_shuffle_9d6f77802c55d31e,
        mid_shuffle_ce425fdcb82ac124,
        mid_singleton_dcc2ba7a89e4184f,
        mid_singletonList_7a7d7f061690d9c4,
        mid_singletonMap_8f675c141c657580,
        mid_sort_9d6f77802c55d31e,
        mid_sort_3297faeb297d4b52,
        mid_swap_9c95bca5cfe384ac,
        mid_synchronizedCollection_f7239928fedb2ca6,
        mid_synchronizedList_0d4c40cb4ec4d146,
        mid_synchronizedMap_f7031b12118d6380,
        mid_synchronizedNavigableMap_b45e18ee2833881a,
        mid_synchronizedNavigableSet_a85d95a914aa6c92,
        mid_synchronizedSet_51acbc353f45c33f,
        mid_synchronizedSortedMap_681ddb3bd8c4ae17,
        mid_synchronizedSortedSet_e94c33bceef30d9b,
        mid_unmodifiableCollection_f7239928fedb2ca6,
        mid_unmodifiableList_0d4c40cb4ec4d146,
        mid_unmodifiableMap_f7031b12118d6380,
        mid_unmodifiableNavigableMap_b45e18ee2833881a,
        mid_unmodifiableNavigableSet_a85d95a914aa6c92,
        mid_unmodifiableSet_51acbc353f45c33f,
        mid_unmodifiableSortedMap_681ddb3bd8c4ae17,
        mid_unmodifiableSortedSet_e94c33bceef30d9b,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Collections(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      Collections(const Collections& obj) : ::java::lang::Object(obj) {}

      static ::java::util::List *EMPTY_LIST;
      static ::java::util::Map *EMPTY_MAP;
      static ::java::util::Set *EMPTY_SET;

      static jboolean addAll(const ::java::util::Collection &, const JArray< ::java::lang::Object > &);
      static ::java::util::Queue asLifoQueue(const ::java::util::Deque &);
      static jint binarySearch(const ::java::util::List &, const ::java::lang::Object &);
      static jint binarySearch(const ::java::util::List &, const ::java::lang::Object &, const ::java::util::Comparator &);
      static ::java::util::Collection checkedCollection(const ::java::util::Collection &, const ::java::lang::Class &);
      static ::java::util::List checkedList(const ::java::util::List &, const ::java::lang::Class &);
      static ::java::util::Map checkedMap(const ::java::util::Map &, const ::java::lang::Class &, const ::java::lang::Class &);
      static ::java::util::NavigableMap checkedNavigableMap(const ::java::util::NavigableMap &, const ::java::lang::Class &, const ::java::lang::Class &);
      static ::java::util::NavigableSet checkedNavigableSet(const ::java::util::NavigableSet &, const ::java::lang::Class &);
      static ::java::util::Queue checkedQueue(const ::java::util::Queue &, const ::java::lang::Class &);
      static ::java::util::Set checkedSet(const ::java::util::Set &, const ::java::lang::Class &);
      static ::java::util::SortedMap checkedSortedMap(const ::java::util::SortedMap &, const ::java::lang::Class &, const ::java::lang::Class &);
      static ::java::util::SortedSet checkedSortedSet(const ::java::util::SortedSet &, const ::java::lang::Class &);
      static void copy(const ::java::util::List &, const ::java::util::List &);
      static jboolean disjoint(const ::java::util::Collection &, const ::java::util::Collection &);
      static ::java::util::Enumeration emptyEnumeration();
      static ::java::util::Iterator emptyIterator();
      static ::java::util::List emptyList();
      static ::java::util::ListIterator emptyListIterator();
      static ::java::util::Map emptyMap();
      static ::java::util::NavigableMap emptyNavigableMap();
      static ::java::util::NavigableSet emptyNavigableSet();
      static ::java::util::Set emptySet();
      static ::java::util::SortedMap emptySortedMap();
      static ::java::util::SortedSet emptySortedSet();
      static ::java::util::Enumeration enumeration(const ::java::util::Collection &);
      static void fill(const ::java::util::List &, const ::java::lang::Object &);
      static jint frequency(const ::java::util::Collection &, const ::java::lang::Object &);
      static jint indexOfSubList(const ::java::util::List &, const ::java::util::List &);
      static jint lastIndexOfSubList(const ::java::util::List &, const ::java::util::List &);
      static ::java::util::ArrayList list(const ::java::util::Enumeration &);
      static ::java::lang::Object max$(const ::java::util::Collection &);
      static ::java::lang::Object max$(const ::java::util::Collection &, const ::java::util::Comparator &);
      static ::java::lang::Object min$(const ::java::util::Collection &);
      static ::java::lang::Object min$(const ::java::util::Collection &, const ::java::util::Comparator &);
      static ::java::util::List nCopies(jint, const ::java::lang::Object &);
      static ::java::util::Set newSetFromMap(const ::java::util::Map &);
      static jboolean replaceAll(const ::java::util::List &, const ::java::lang::Object &, const ::java::lang::Object &);
      static void reverse(const ::java::util::List &);
      static ::java::util::Comparator reverseOrder();
      static ::java::util::Comparator reverseOrder(const ::java::util::Comparator &);
      static void rotate(const ::java::util::List &, jint);
      static void shuffle(const ::java::util::List &);
      static void shuffle(const ::java::util::List &, const ::java::util::Random &);
      static ::java::util::Set singleton(const ::java::lang::Object &);
      static ::java::util::List singletonList(const ::java::lang::Object &);
      static ::java::util::Map singletonMap(const ::java::lang::Object &, const ::java::lang::Object &);
      static void sort(const ::java::util::List &);
      static void sort(const ::java::util::List &, const ::java::util::Comparator &);
      static void swap(const ::java::util::List &, jint, jint);
      static ::java::util::Collection synchronizedCollection(const ::java::util::Collection &);
      static ::java::util::List synchronizedList(const ::java::util::List &);
      static ::java::util::Map synchronizedMap(const ::java::util::Map &);
      static ::java::util::NavigableMap synchronizedNavigableMap(const ::java::util::NavigableMap &);
      static ::java::util::NavigableSet synchronizedNavigableSet(const ::java::util::NavigableSet &);
      static ::java::util::Set synchronizedSet(const ::java::util::Set &);
      static ::java::util::SortedMap synchronizedSortedMap(const ::java::util::SortedMap &);
      static ::java::util::SortedSet synchronizedSortedSet(const ::java::util::SortedSet &);
      static ::java::util::Collection unmodifiableCollection(const ::java::util::Collection &);
      static ::java::util::List unmodifiableList(const ::java::util::List &);
      static ::java::util::Map unmodifiableMap(const ::java::util::Map &);
      static ::java::util::NavigableMap unmodifiableNavigableMap(const ::java::util::NavigableMap &);
      static ::java::util::NavigableSet unmodifiableNavigableSet(const ::java::util::NavigableSet &);
      static ::java::util::Set unmodifiableSet(const ::java::util::Set &);
      static ::java::util::SortedMap unmodifiableSortedMap(const ::java::util::SortedMap &);
      static ::java::util::SortedSet unmodifiableSortedSet(const ::java::util::SortedSet &);
    };
  }
}

#include <Python.h>

namespace java {
  namespace util {
    extern PyType_Def PY_TYPE_DEF(Collections);
    extern PyTypeObject *PY_TYPE(Collections);

    class t_Collections {
    public:
      PyObject_HEAD
      Collections object;
      static PyObject *wrap_Object(const Collections&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
