#ifndef org_apache_lucene_codecs_blocktree_BlockTreeTermsReader$FSTLoadMode_H
#define org_apache_lucene_codecs_blocktree_BlockTreeTermsReader$FSTLoadMode_H

#include "java/lang/Enum.h"

namespace java {
  namespace lang {
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          class BlockTreeTermsReader$FSTLoadMode;
        }
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          class BlockTreeTermsReader$FSTLoadMode : public ::java::lang::Enum {
           public:
            enum {
              mid_valueOf_df01c524a8b8e4c6,
              mid_values_67933b1a0e7c928a,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit BlockTreeTermsReader$FSTLoadMode(jobject obj) : ::java::lang::Enum(obj) {
              if (obj != NULL && mids$ == NULL)
                env->getClass(initializeClass);
            }
            BlockTreeTermsReader$FSTLoadMode(const BlockTreeTermsReader$FSTLoadMode& obj) : ::java::lang::Enum(obj) {}

            static BlockTreeTermsReader$FSTLoadMode *AUTO;
            static BlockTreeTermsReader$FSTLoadMode *OFF_HEAP;
            static BlockTreeTermsReader$FSTLoadMode *ON_HEAP;
            static BlockTreeTermsReader$FSTLoadMode *OPTIMIZE_UPDATES_OFF_HEAP;

            static BlockTreeTermsReader$FSTLoadMode valueOf(const ::java::lang::String &);
            static JArray< BlockTreeTermsReader$FSTLoadMode > values();
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          extern PyType_Def PY_TYPE_DEF(BlockTreeTermsReader$FSTLoadMode);
          extern PyTypeObject *PY_TYPE(BlockTreeTermsReader$FSTLoadMode);

          class t_BlockTreeTermsReader$FSTLoadMode {
          public:
            PyObject_HEAD
            BlockTreeTermsReader$FSTLoadMode object;
            PyTypeObject *parameters[1];
            static PyTypeObject **parameters_(t_BlockTreeTermsReader$FSTLoadMode *self)
            {
              return (PyTypeObject **) &(self->parameters);
            }
            static PyObject *wrap_Object(const BlockTreeTermsReader$FSTLoadMode&);
            static PyObject *wrap_jobject(const jobject&);
            static PyObject *wrap_Object(const BlockTreeTermsReader$FSTLoadMode&, PyTypeObject *);
            static PyObject *wrap_jobject(const jobject&, PyTypeObject *);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
