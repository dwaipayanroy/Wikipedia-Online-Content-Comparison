#ifndef org_apache_lucene_store_ByteBuffersDataOutput_H
#define org_apache_lucene_store_ByteBuffersDataOutput_H

#include "org/apache/lucene/store/DataOutput.h"

namespace java {
  namespace io {
    class IOException;
  }
  namespace util {
    class Set;
    class Map;
    class ArrayList;
  }
  namespace lang {
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class Accountable;
      }
      namespace store {
        class ByteBuffersDataOutput;
        class ByteBuffersDataInput;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        class ByteBuffersDataOutput : public ::org::apache::lucene::store::DataOutput {
         public:
          enum {
            mid_init$_8e1955e8a9db094a,
            mid_init$_d89013dae69b2a92,
            mid_copyTo_63d77d2cce60381d,
            mid_newResettableInstance_d630b53ca1ec542f,
            mid_ramBytesUsed_e0866fd7ad03cc05,
            mid_reset_8e1955e8a9db094a,
            mid_size_e0866fd7ad03cc05,
            mid_toArrayCopy_7bddfff143a4e7e0,
            mid_toDataInput_ebfb3cccb73b4e6a,
            mid_toString_a59eabb26a802fa9,
            mid_writeByte_936db15918436489,
            mid_writeBytes_8367e08c35d968ea,
            mid_writeBytes_e71b2fd94d730932,
            mid_writeBytes_7fc0bf56a271cd51,
            mid_writeInt_36df8fa8e39fb5cc,
            mid_writeLong_d89013dae69b2a92,
            mid_writeMapOfStrings_c0bf7b502c3283d5,
            mid_writeSetOfStrings_88495d2877cac0c5,
            mid_writeShort_1626b38adb7a8f80,
            mid_writeString_f23cb8ed8bef391c,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit ByteBuffersDataOutput(jobject obj) : ::org::apache::lucene::store::DataOutput(obj) {
            if (obj != NULL && mids$ == NULL)
              env->getClass(initializeClass);
          }
          ByteBuffersDataOutput(const ByteBuffersDataOutput& obj) : ::org::apache::lucene::store::DataOutput(obj) {}

          static jint DEFAULT_MAX_BITS_PER_BLOCK;
          static jint DEFAULT_MIN_BITS_PER_BLOCK;

          ByteBuffersDataOutput();
          ByteBuffersDataOutput(jlong);

          void copyTo(const ::org::apache::lucene::store::DataOutput &) const;
          static ByteBuffersDataOutput newResettableInstance();
          jlong ramBytesUsed() const;
          void reset() const;
          jlong size() const;
          JArray< jbyte > toArrayCopy() const;
          ::org::apache::lucene::store::ByteBuffersDataInput toDataInput() const;
          ::java::lang::String toString() const;
          void writeByte(jbyte) const;
          void writeBytes(const JArray< jbyte > &) const;
          void writeBytes(const JArray< jbyte > &, jint) const;
          void writeBytes(const JArray< jbyte > &, jint, jint) const;
          void writeInt(jint) const;
          void writeLong(jlong) const;
          void writeMapOfStrings(const ::java::util::Map &) const;
          void writeSetOfStrings(const ::java::util::Set &) const;
          void writeShort(jshort) const;
          void writeString(const ::java::lang::String &) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        extern PyType_Def PY_TYPE_DEF(ByteBuffersDataOutput);
        extern PyTypeObject *PY_TYPE(ByteBuffersDataOutput);

        class t_ByteBuffersDataOutput {
        public:
          PyObject_HEAD
          ByteBuffersDataOutput object;
          static PyObject *wrap_Object(const ByteBuffersDataOutput&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
