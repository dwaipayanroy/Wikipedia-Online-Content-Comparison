#ifndef org_apache_lucene_util_FixedBitSet_H
#define org_apache_lucene_util_FixedBitSet_H

#include "org/apache/lucene/util/BitSet.h"

namespace java {
  namespace io {
    class IOException;
  }
  namespace lang {
    class Object;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class Bits;
        class FixedBitSet;
      }
      namespace search {
        class DocIdSetIterator;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        class FixedBitSet : public ::org::apache::lucene::util::BitSet {
         public:
          enum {
            mid_init$_36df8fa8e39fb5cc,
            mid_init$_183ef53c3b5cc2e2,
            mid_and_f92a95dbd3e321d7,
            mid_andNot_f92a95dbd3e321d7,
            mid_andNotCount_57f1f8a96497b854,
            mid_asReadOnlyBits_ee420465c0f654d7,
            mid_bits2words_31c387e1be87ebd7,
            mid_cardinality_ebe7ab370a509c13,
            mid_clear_36df8fa8e39fb5cc,
            mid_clear_ce83a7763fbf1810,
            mid_clone_50db3f49970a243c,
            mid_copyOf_a6a78dda8247fbc0,
            mid_ensureCapacity_cd1ef864b9fd8f78,
            mid_equals_95c645439e1de637,
            mid_flip_36df8fa8e39fb5cc,
            mid_flip_ce83a7763fbf1810,
            mid_get_7913d7ee341c2642,
            mid_getAndClear_7913d7ee341c2642,
            mid_getAndSet_7913d7ee341c2642,
            mid_getBits_439c0db87e4d0b90,
            mid_hashCode_ebe7ab370a509c13,
            mid_intersectionCount_57f1f8a96497b854,
            mid_intersects_345435049f86af7f,
            mid_length_ebe7ab370a509c13,
            mid_nextSetBit_31c387e1be87ebd7,
            mid_or_f92a95dbd3e321d7,
            mid_or_fbe7ee7c42d61ebf,
            mid_prevSetBit_31c387e1be87ebd7,
            mid_ramBytesUsed_e0866fd7ad03cc05,
            mid_scanIsEmpty_b61c635e27ed4ce7,
            mid_set_36df8fa8e39fb5cc,
            mid_set_ce83a7763fbf1810,
            mid_unionCount_57f1f8a96497b854,
            mid_xor_f92a95dbd3e321d7,
            mid_xor_fbe7ee7c42d61ebf,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit FixedBitSet(jobject obj) : ::org::apache::lucene::util::BitSet(obj) {
            if (obj != NULL && mids$ == NULL)
              env->getClass(initializeClass);
          }
          FixedBitSet(const FixedBitSet& obj) : ::org::apache::lucene::util::BitSet(obj) {}

          FixedBitSet(jint);
          FixedBitSet(const JArray< jlong > &, jint);

          void and$(const FixedBitSet &) const;
          void andNot(const FixedBitSet &) const;
          static jlong andNotCount(const FixedBitSet &, const FixedBitSet &);
          ::org::apache::lucene::util::Bits asReadOnlyBits() const;
          static jint bits2words(jint);
          jint cardinality() const;
          void clear(jint) const;
          void clear(jint, jint) const;
          FixedBitSet clone() const;
          static FixedBitSet copyOf(const ::org::apache::lucene::util::Bits &);
          static FixedBitSet ensureCapacity(const FixedBitSet &, jint);
          jboolean equals(const ::java::lang::Object &) const;
          void flip(jint) const;
          void flip(jint, jint) const;
          jboolean get(jint) const;
          jboolean getAndClear(jint) const;
          jboolean getAndSet(jint) const;
          JArray< jlong > getBits() const;
          jint hashCode() const;
          static jlong intersectionCount(const FixedBitSet &, const FixedBitSet &);
          jboolean intersects(const FixedBitSet &) const;
          jint length() const;
          jint nextSetBit(jint) const;
          void or$(const FixedBitSet &) const;
          void or$(const ::org::apache::lucene::search::DocIdSetIterator &) const;
          jint prevSetBit(jint) const;
          jlong ramBytesUsed() const;
          jboolean scanIsEmpty() const;
          void set(jint) const;
          void set(jint, jint) const;
          static jlong unionCount(const FixedBitSet &, const FixedBitSet &);
          void xor$(const FixedBitSet &) const;
          void xor$(const ::org::apache::lucene::search::DocIdSetIterator &) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        extern PyType_Def PY_TYPE_DEF(FixedBitSet);
        extern PyTypeObject *PY_TYPE(FixedBitSet);

        class t_FixedBitSet {
        public:
          PyObject_HEAD
          FixedBitSet object;
          static PyObject *wrap_Object(const FixedBitSet&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
