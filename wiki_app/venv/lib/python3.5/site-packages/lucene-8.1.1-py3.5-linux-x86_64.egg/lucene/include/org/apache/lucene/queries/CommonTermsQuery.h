#ifndef org_apache_lucene_queries_CommonTermsQuery_H
#define org_apache_lucene_queries_CommonTermsQuery_H

#include "org/apache/lucene/search/Query.h"

namespace java {
  namespace io {
    class IOException;
  }
  namespace util {
    class List;
  }
  namespace lang {
    class Object;
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        class Term;
        class TermStates;
        class IndexReader;
        class LeafReaderContext;
      }
      namespace search {
        class QueryVisitor;
        class BooleanClause$Occur;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        class CommonTermsQuery : public ::org::apache::lucene::search::Query {
         public:
          enum {
            mid_init$_b13f095dfba26ff7,
            mid_add_bc45c2c262c2b1f6,
            mid_collectTermStates_02b679934f0cac14,
            mid_equals_95c645439e1de637,
            mid_getHighFreqBoost_9c0456e344056ea9,
            mid_getHighFreqMinimumNumberShouldMatch_9c0456e344056ea9,
            mid_getHighFreqOccur_3efe271909a251b4,
            mid_getLowFreqBoost_9c0456e344056ea9,
            mid_getLowFreqMinimumNumberShouldMatch_9c0456e344056ea9,
            mid_getLowFreqOccur_3efe271909a251b4,
            mid_getMaxTermFrequency_9c0456e344056ea9,
            mid_getTerms_3ca2fd68c33ee839,
            mid_hashCode_ebe7ab370a509c13,
            mid_rewrite_a5e4c2ec6762d247,
            mid_setHighFreqMinimumNumberShouldMatch_87f6151add653f41,
            mid_setLowFreqMinimumNumberShouldMatch_87f6151add653f41,
            mid_toString_744f4d1a4f853475,
            mid_visit_8d58f89b6b661a18,
            mid_calcLowFreqMinimumNumberShouldMatch_31c387e1be87ebd7,
            mid_calcHighFreqMinimumNumberShouldMatch_31c387e1be87ebd7,
            mid_buildQuery_3c486f0e24d36dd2,
            mid_newTermQuery_f91a97448ca16acd,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit CommonTermsQuery(jobject obj) : ::org::apache::lucene::search::Query(obj) {
            if (obj != NULL && mids$ == NULL)
              env->getClass(initializeClass);
          }
          CommonTermsQuery(const CommonTermsQuery& obj) : ::org::apache::lucene::search::Query(obj) {}

          CommonTermsQuery(const ::org::apache::lucene::search::BooleanClause$Occur &, const ::org::apache::lucene::search::BooleanClause$Occur &, jfloat);

          void add(const ::org::apache::lucene::index::Term &) const;
          void collectTermStates(const ::org::apache::lucene::index::IndexReader &, const ::java::util::List &, const JArray< ::org::apache::lucene::index::TermStates > &, const JArray< ::org::apache::lucene::index::Term > &) const;
          jboolean equals(const ::java::lang::Object &) const;
          jfloat getHighFreqBoost() const;
          jfloat getHighFreqMinimumNumberShouldMatch() const;
          ::org::apache::lucene::search::BooleanClause$Occur getHighFreqOccur() const;
          jfloat getLowFreqBoost() const;
          jfloat getLowFreqMinimumNumberShouldMatch() const;
          ::org::apache::lucene::search::BooleanClause$Occur getLowFreqOccur() const;
          jfloat getMaxTermFrequency() const;
          ::java::util::List getTerms() const;
          jint hashCode() const;
          ::org::apache::lucene::search::Query rewrite(const ::org::apache::lucene::index::IndexReader &) const;
          void setHighFreqMinimumNumberShouldMatch(jfloat) const;
          void setLowFreqMinimumNumberShouldMatch(jfloat) const;
          ::java::lang::String toString(const ::java::lang::String &) const;
          void visit(const ::org::apache::lucene::search::QueryVisitor &) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        extern PyType_Def PY_TYPE_DEF(CommonTermsQuery);
        extern PyTypeObject *PY_TYPE(CommonTermsQuery);

        class t_CommonTermsQuery {
        public:
          PyObject_HEAD
          CommonTermsQuery object;
          static PyObject *wrap_Object(const CommonTermsQuery&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
