#ifndef org_apache_lucene_analysis_CharArrayMap_H
#define org_apache_lucene_analysis_CharArrayMap_H

#include "java/util/AbstractMap.h"

namespace java {
  namespace util {
    class Map;
  }
  namespace lang {
    class Object;
    class Class;
    class CharSequence;
    class String;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        class CharArrayMap$EntrySet;
        class CharArrayMap;
        class CharArraySet;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        class CharArrayMap : public ::java::util::AbstractMap {
         public:
          enum {
            mid_init$_1580730e4237d3b7,
            mid_init$_5f9817ed41870199,
            mid_clear_8e1955e8a9db094a,
            mid_containsKey_298703078a221be0,
            mid_containsKey_95c645439e1de637,
            mid_containsKey_89161580c53c93c3,
            mid_copy_1c77af9b31b997fb,
            mid_emptyMap_43c143be16b8b9ca,
            mid_entrySet_320007893c5e91d6,
            mid_get_0c71e464ccfa3431,
            mid_get_f4977fb7b1cd4abc,
            mid_get_3e607b8b86757cb5,
            mid_keySet_7401bdeaaaeed499,
            mid_put_d28992216aaa6c7d,
            mid_put_55c66122b77a5bcd,
            mid_put_6e9f8089b4174900,
            mid_put_4db91d564f8ba6af,
            mid_remove_f4977fb7b1cd4abc,
            mid_size_ebe7ab370a509c13,
            mid_toString_a59eabb26a802fa9,
            mid_unmodifiableMap_5d34a0f3c861bdb5,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit CharArrayMap(jobject obj) : ::java::util::AbstractMap(obj) {
            if (obj != NULL && mids$ == NULL)
              env->getClass(initializeClass);
          }
          CharArrayMap(const CharArrayMap& obj) : ::java::util::AbstractMap(obj) {}

          CharArrayMap(jint, jboolean);
          CharArrayMap(const ::java::util::Map &, jboolean);

          void clear() const;
          jboolean containsKey(const ::java::lang::CharSequence &) const;
          jboolean containsKey(const ::java::lang::Object &) const;
          jboolean containsKey(const JArray< jchar > &, jint, jint) const;
          static CharArrayMap copy(const ::java::util::Map &);
          static CharArrayMap emptyMap();
          ::org::apache::lucene::analysis::CharArrayMap$EntrySet entrySet() const;
          ::java::lang::Object get(const ::java::lang::CharSequence &) const;
          ::java::lang::Object get(const ::java::lang::Object &) const;
          ::java::lang::Object get(const JArray< jchar > &, jint, jint) const;
          ::org::apache::lucene::analysis::CharArraySet keySet() const;
          ::java::lang::Object put(const JArray< jchar > &, const ::java::lang::Object &) const;
          ::java::lang::Object put(const ::java::lang::String &, const ::java::lang::Object &) const;
          ::java::lang::Object put(const ::java::lang::CharSequence &, const ::java::lang::Object &) const;
          ::java::lang::Object put(const ::java::lang::Object &, const ::java::lang::Object &) const;
          ::java::lang::Object remove(const ::java::lang::Object &) const;
          jint size() const;
          ::java::lang::String toString() const;
          static CharArrayMap unmodifiableMap(const CharArrayMap &);
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        extern PyType_Def PY_TYPE_DEF(CharArrayMap);
        extern PyTypeObject *PY_TYPE(CharArrayMap);

        class t_CharArrayMap {
        public:
          PyObject_HEAD
          CharArrayMap object;
          PyTypeObject *parameters[1];
          static PyTypeObject **parameters_(t_CharArrayMap *self)
          {
            return (PyTypeObject **) &(self->parameters);
          }
          static PyObject *wrap_Object(const CharArrayMap&);
          static PyObject *wrap_jobject(const jobject&);
          static PyObject *wrap_Object(const CharArrayMap&, PyTypeObject *);
          static PyObject *wrap_jobject(const jobject&, PyTypeObject *);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
