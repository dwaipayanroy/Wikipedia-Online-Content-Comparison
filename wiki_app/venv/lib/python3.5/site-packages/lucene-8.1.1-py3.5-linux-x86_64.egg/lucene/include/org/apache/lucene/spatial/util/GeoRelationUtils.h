#ifndef org_apache_lucene_spatial_util_GeoRelationUtils_H
#define org_apache_lucene_spatial_util_GeoRelationUtils_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Class;
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial {
        namespace util {

          class GeoRelationUtils : public ::java::lang::Object {
           public:
            enum {
              mid_pointInRectPrecise_b3caf9b2a3b9cb7f,
              mid_rectCrosses_855c2fb295b8ddcf,
              mid_rectIntersects_855c2fb295b8ddcf,
              mid_rectWithin_855c2fb295b8ddcf,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit GeoRelationUtils(jobject obj) : ::java::lang::Object(obj) {
              if (obj != NULL && mids$ == NULL)
                env->getClass(initializeClass);
            }
            GeoRelationUtils(const GeoRelationUtils& obj) : ::java::lang::Object(obj) {}

            static jboolean pointInRectPrecise(jdouble, jdouble, jdouble, jdouble, jdouble, jdouble);
            static jboolean rectCrosses(jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble);
            static jboolean rectIntersects(jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble);
            static jboolean rectWithin(jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble);
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial {
        namespace util {
          extern PyType_Def PY_TYPE_DEF(GeoRelationUtils);
          extern PyTypeObject *PY_TYPE(GeoRelationUtils);

          class t_GeoRelationUtils {
          public:
            PyObject_HEAD
            GeoRelationUtils object;
            static PyObject *wrap_Object(const GeoRelationUtils&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
