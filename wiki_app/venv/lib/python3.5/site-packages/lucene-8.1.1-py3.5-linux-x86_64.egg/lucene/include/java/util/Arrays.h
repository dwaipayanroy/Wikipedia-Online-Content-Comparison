#ifndef java_util_Arrays_H
#define java_util_Arrays_H

#include "java/lang/Object.h"

namespace java {
  namespace util {
    class Comparator;
    class Spliterator;
    class Spliterator$OfInt;
    class Spliterator$OfLong;
    class List;
    class Spliterator$OfDouble;
  }
  namespace lang {
    class Comparable;
    class String;
    class Class;
  }
}
template<class T> class JArray;

namespace java {
  namespace util {

    class Arrays : public ::java::lang::Object {
     public:
      enum {
        mid_asList_9bcdf316c9e2c3d8,
        mid_binarySearch_9738f833a2dffed8,
        mid_binarySearch_553d00ef26b0f734,
        mid_binarySearch_232feef874a2e89a,
        mid_binarySearch_49b2885cd07e6d78,
        mid_binarySearch_2c767fdcf38097af,
        mid_binarySearch_e5083d1027f865fa,
        mid_binarySearch_75f4c921d2541b46,
        mid_binarySearch_05ef44ad5deb1d84,
        mid_binarySearch_39bb906ff217ac88,
        mid_binarySearch_f13893e08bd45f7a,
        mid_binarySearch_9529674e6830ee2a,
        mid_binarySearch_64d1492367e3e294,
        mid_binarySearch_26f87a3bbeb0a937,
        mid_binarySearch_6ffc7dc6a208278f,
        mid_binarySearch_7c384487696eafff,
        mid_binarySearch_37623558a347d7a2,
        mid_binarySearch_a3ca859fd2db5d3f,
        mid_binarySearch_f476065b54a1e73a,
        mid_copyOf_c19aa75cbf7b48e7,
        mid_copyOf_2f587cb85c477f49,
        mid_copyOf_5e5000eec34eb367,
        mid_copyOf_d099b42bee88fa67,
        mid_copyOf_6cf5408f468caad8,
        mid_copyOf_40f6fc26ab676e32,
        mid_copyOf_59de9c9815a92886,
        mid_copyOf_0084a99894b89183,
        mid_copyOf_ecd4bf159208b187,
        mid_copyOf_0799fee51bcfc298,
        mid_copyOfRange_d12471b4e02f3415,
        mid_copyOfRange_2fcd924339f2a89a,
        mid_copyOfRange_8176ecdcc2a8f607,
        mid_copyOfRange_a1b17cab6944602e,
        mid_copyOfRange_69158e4bfb657d1d,
        mid_copyOfRange_42bd6c6769a9d261,
        mid_copyOfRange_241f45f0d724bf02,
        mid_copyOfRange_dd79044385f6fba9,
        mid_copyOfRange_115090335d43bf73,
        mid_copyOfRange_c9b03e1f8387af94,
        mid_deepEquals_28cf8d5c11043745,
        mid_deepHashCode_5ca92d3e490c0ca9,
        mid_deepToString_de9a9ce837faebca,
        mid_equals_4540004084efc66c,
        mid_equals_d9b8b456439a6dd5,
        mid_equals_bfe61f47e150d8af,
        mid_equals_bc927e06367379ff,
        mid_equals_3086cc6ff7e1e6a4,
        mid_equals_44d7e85a81ad35e6,
        mid_equals_28cf8d5c11043745,
        mid_equals_8e37dc7b657ea04d,
        mid_equals_76a3096a440428fd,
        mid_fill_482a50b2debf924d,
        mid_fill_d54ebf8e54481630,
        mid_fill_db0c518d203af084,
        mid_fill_ae52d4443d248e72,
        mid_fill_fa143178750d55b1,
        mid_fill_b213f8ff7fad8098,
        mid_fill_820ce352d356d1eb,
        mid_fill_f05786fdebf2c456,
        mid_fill_f536da0a72637126,
        mid_fill_8843877e13f17dcc,
        mid_fill_492e8a13cf544e80,
        mid_fill_88ff90261c0e3a2a,
        mid_fill_a304eb26297a9f09,
        mid_fill_b68666ad5e791c60,
        mid_fill_1470bb7a931cb05f,
        mid_fill_d1f4851efe06b281,
        mid_fill_939163676def18c6,
        mid_fill_0e65b1c90b54e1b9,
        mid_hashCode_d3f0195ff2b46ce5,
        mid_hashCode_e4e7b854d6d56e78,
        mid_hashCode_8152e1b0064cef28,
        mid_hashCode_2f5ff147636df1c2,
        mid_hashCode_d656bcb94e9631d1,
        mid_hashCode_d3118cc30bb6b9ba,
        mid_hashCode_5ca92d3e490c0ca9,
        mid_hashCode_c09dbaaeb24ef6f1,
        mid_hashCode_64f60b18206b093c,
        mid_parallelSort_8367e08c35d968ea,
        mid_parallelSort_430360821bfbd749,
        mid_parallelSort_54e2a1f72129207d,
        mid_parallelSort_024704fff8fd72f2,
        mid_parallelSort_fa96960d4530abfc,
        mid_parallelSort_ff3717b3db5e1cb5,
        mid_parallelSort_8d3fe538f2f00a1c,
        mid_parallelSort_2782d519c44cc196,
        mid_parallelSort_68cb56f0b3af0336,
        mid_parallelSort_7fc0bf56a271cd51,
        mid_parallelSort_ea931aae960c632d,
        mid_parallelSort_d325586fe7b687ae,
        mid_parallelSort_819e9d424ca3d5bb,
        mid_parallelSort_004ed92430453f20,
        mid_parallelSort_cbe73eda5e8b07bc,
        mid_parallelSort_3dd1b4e85ea507db,
        mid_parallelSort_1a0c952ef1b1ca83,
        mid_parallelSort_083bd50517704518,
        mid_sort_8367e08c35d968ea,
        mid_sort_430360821bfbd749,
        mid_sort_54e2a1f72129207d,
        mid_sort_024704fff8fd72f2,
        mid_sort_fa96960d4530abfc,
        mid_sort_ff3717b3db5e1cb5,
        mid_sort_06ceb18b53b9e147,
        mid_sort_2782d519c44cc196,
        mid_sort_68cb56f0b3af0336,
        mid_sort_7fc0bf56a271cd51,
        mid_sort_ea931aae960c632d,
        mid_sort_d325586fe7b687ae,
        mid_sort_819e9d424ca3d5bb,
        mid_sort_004ed92430453f20,
        mid_sort_cbe73eda5e8b07bc,
        mid_sort_d79ebacf43513e4a,
        mid_sort_1a0c952ef1b1ca83,
        mid_sort_083bd50517704518,
        mid_spliterator_6e8cb0d8f3ed06b6,
        mid_spliterator_f292a2b6a5775988,
        mid_spliterator_787f6e6ff29b5f45,
        mid_spliterator_bd946e30fd6a8a01,
        mid_spliterator_62ea8726fbe9fc9b,
        mid_spliterator_8dfbc8f5e2826337,
        mid_spliterator_b05957bccbacfd82,
        mid_spliterator_1745f29085bb01a1,
        mid_toString_7c9fd534ab332ed6,
        mid_toString_5d0b9e33120ea8bd,
        mid_toString_e6c099903ab21d1d,
        mid_toString_ecfc3c0c8ac8bc36,
        mid_toString_87a72e450094ac04,
        mid_toString_9f0a6374a7c88112,
        mid_toString_de9a9ce837faebca,
        mid_toString_cbe60f2a2c560f49,
        mid_toString_59d2511ffdeca4ef,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Arrays(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      Arrays(const Arrays& obj) : ::java::lang::Object(obj) {}

      static ::java::util::List asList(const JArray< ::java::lang::Object > &);
      static jint binarySearch(const JArray< jbyte > &, jbyte);
      static jint binarySearch(const JArray< jchar > &, jchar);
      static jint binarySearch(const JArray< jdouble > &, jdouble);
      static jint binarySearch(const JArray< jfloat > &, jfloat);
      static jint binarySearch(const JArray< jint > &, jint);
      static jint binarySearch(const JArray< ::java::lang::Object > &, const ::java::lang::Object &);
      static jint binarySearch(const JArray< jlong > &, jlong);
      static jint binarySearch(const JArray< jshort > &, jshort);
      static jint binarySearch(const JArray< ::java::lang::Object > &, const ::java::lang::Object &, const ::java::util::Comparator &);
      static jint binarySearch(const JArray< jbyte > &, jint, jint, jbyte);
      static jint binarySearch(const JArray< jchar > &, jint, jint, jchar);
      static jint binarySearch(const JArray< jdouble > &, jint, jint, jdouble);
      static jint binarySearch(const JArray< jfloat > &, jint, jint, jfloat);
      static jint binarySearch(const JArray< jint > &, jint, jint, jint);
      static jint binarySearch(const JArray< jlong > &, jint, jint, jlong);
      static jint binarySearch(const JArray< ::java::lang::Object > &, jint, jint, const ::java::lang::Object &);
      static jint binarySearch(const JArray< jshort > &, jint, jint, jshort);
      static jint binarySearch(const JArray< ::java::lang::Object > &, jint, jint, const ::java::lang::Object &, const ::java::util::Comparator &);
      static JArray< jbyte > copyOf(const JArray< jbyte > &, jint);
      static JArray< jchar > copyOf(const JArray< jchar > &, jint);
      static JArray< jdouble > copyOf(const JArray< jdouble > &, jint);
      static JArray< jfloat > copyOf(const JArray< jfloat > &, jint);
      static JArray< jint > copyOf(const JArray< jint > &, jint);
      static JArray< jlong > copyOf(const JArray< jlong > &, jint);
      static JArray< ::java::lang::Object > copyOf(const JArray< ::java::lang::Object > &, jint);
      static JArray< jshort > copyOf(const JArray< jshort > &, jint);
      static JArray< jboolean > copyOf(const JArray< jboolean > &, jint);
      static JArray< ::java::lang::Object > copyOf(const JArray< ::java::lang::Object > &, jint, const ::java::lang::Class &);
      static JArray< jbyte > copyOfRange(const JArray< jbyte > &, jint, jint);
      static JArray< jchar > copyOfRange(const JArray< jchar > &, jint, jint);
      static JArray< jdouble > copyOfRange(const JArray< jdouble > &, jint, jint);
      static JArray< jfloat > copyOfRange(const JArray< jfloat > &, jint, jint);
      static JArray< jint > copyOfRange(const JArray< jint > &, jint, jint);
      static JArray< jlong > copyOfRange(const JArray< jlong > &, jint, jint);
      static JArray< ::java::lang::Object > copyOfRange(const JArray< ::java::lang::Object > &, jint, jint);
      static JArray< jshort > copyOfRange(const JArray< jshort > &, jint, jint);
      static JArray< jboolean > copyOfRange(const JArray< jboolean > &, jint, jint);
      static JArray< ::java::lang::Object > copyOfRange(const JArray< ::java::lang::Object > &, jint, jint, const ::java::lang::Class &);
      static jboolean deepEquals(const JArray< ::java::lang::Object > &, const JArray< ::java::lang::Object > &);
      static jint deepHashCode(const JArray< ::java::lang::Object > &);
      static ::java::lang::String deepToString(const JArray< ::java::lang::Object > &);
      static jboolean equals(const JArray< jbyte > &, const JArray< jbyte > &);
      static jboolean equals(const JArray< jchar > &, const JArray< jchar > &);
      static jboolean equals(const JArray< jdouble > &, const JArray< jdouble > &);
      static jboolean equals(const JArray< jfloat > &, const JArray< jfloat > &);
      static jboolean equals(const JArray< jint > &, const JArray< jint > &);
      static jboolean equals(const JArray< jlong > &, const JArray< jlong > &);
      static jboolean equals(const JArray< ::java::lang::Object > &, const JArray< ::java::lang::Object > &);
      static jboolean equals(const JArray< jshort > &, const JArray< jshort > &);
      static jboolean equals(const JArray< jboolean > &, const JArray< jboolean > &);
      static void fill(const JArray< jboolean > &, jboolean);
      static void fill(const JArray< jbyte > &, jbyte);
      static void fill(const JArray< jchar > &, jchar);
      static void fill(const JArray< jdouble > &, jdouble);
      static void fill(const JArray< jfloat > &, jfloat);
      static void fill(const JArray< jint > &, jint);
      static void fill(const JArray< ::java::lang::Object > &, const ::java::lang::Object &);
      static void fill(const JArray< jlong > &, jlong);
      static void fill(const JArray< jshort > &, jshort);
      static void fill(const JArray< jboolean > &, jint, jint, jboolean);
      static void fill(const JArray< jbyte > &, jint, jint, jbyte);
      static void fill(const JArray< jchar > &, jint, jint, jchar);
      static void fill(const JArray< jdouble > &, jint, jint, jdouble);
      static void fill(const JArray< jfloat > &, jint, jint, jfloat);
      static void fill(const JArray< jint > &, jint, jint, jint);
      static void fill(const JArray< ::java::lang::Object > &, jint, jint, const ::java::lang::Object &);
      static void fill(const JArray< jlong > &, jint, jint, jlong);
      static void fill(const JArray< jshort > &, jint, jint, jshort);
      static jint hashCode(const JArray< jbyte > &);
      static jint hashCode(const JArray< jchar > &);
      static jint hashCode(const JArray< jdouble > &);
      static jint hashCode(const JArray< jfloat > &);
      static jint hashCode(const JArray< jint > &);
      static jint hashCode(const JArray< jlong > &);
      static jint hashCode(const JArray< ::java::lang::Object > &);
      static jint hashCode(const JArray< jshort > &);
      static jint hashCode(const JArray< jboolean > &);
      static void parallelSort(const JArray< jbyte > &);
      static void parallelSort(const JArray< jchar > &);
      static void parallelSort(const JArray< jdouble > &);
      static void parallelSort(const JArray< jfloat > &);
      static void parallelSort(const JArray< jint > &);
      static void parallelSort(const JArray< jlong > &);
      static void parallelSort(const JArray< ::java::lang::Comparable > &);
      static void parallelSort(const JArray< jshort > &);
      static void parallelSort(const JArray< ::java::lang::Object > &, const ::java::util::Comparator &);
      static void parallelSort(const JArray< jbyte > &, jint, jint);
      static void parallelSort(const JArray< jchar > &, jint, jint);
      static void parallelSort(const JArray< jdouble > &, jint, jint);
      static void parallelSort(const JArray< jfloat > &, jint, jint);
      static void parallelSort(const JArray< jint > &, jint, jint);
      static void parallelSort(const JArray< jlong > &, jint, jint);
      static void parallelSort(const JArray< ::java::lang::Comparable > &, jint, jint);
      static void parallelSort(const JArray< jshort > &, jint, jint);
      static void parallelSort(const JArray< ::java::lang::Object > &, jint, jint, const ::java::util::Comparator &);
      static void sort(const JArray< jbyte > &);
      static void sort(const JArray< jchar > &);
      static void sort(const JArray< jdouble > &);
      static void sort(const JArray< jfloat > &);
      static void sort(const JArray< jint > &);
      static void sort(const JArray< jlong > &);
      static void sort(const JArray< ::java::lang::Object > &);
      static void sort(const JArray< jshort > &);
      static void sort(const JArray< ::java::lang::Object > &, const ::java::util::Comparator &);
      static void sort(const JArray< jbyte > &, jint, jint);
      static void sort(const JArray< jchar > &, jint, jint);
      static void sort(const JArray< jdouble > &, jint, jint);
      static void sort(const JArray< jfloat > &, jint, jint);
      static void sort(const JArray< jint > &, jint, jint);
      static void sort(const JArray< jlong > &, jint, jint);
      static void sort(const JArray< ::java::lang::Object > &, jint, jint);
      static void sort(const JArray< jshort > &, jint, jint);
      static void sort(const JArray< ::java::lang::Object > &, jint, jint, const ::java::util::Comparator &);
      static ::java::util::Spliterator$OfDouble spliterator(const JArray< jdouble > &);
      static ::java::util::Spliterator$OfInt spliterator(const JArray< jint > &);
      static ::java::util::Spliterator$OfLong spliterator(const JArray< jlong > &);
      static ::java::util::Spliterator spliterator(const JArray< ::java::lang::Object > &);
      static ::java::util::Spliterator$OfDouble spliterator(const JArray< jdouble > &, jint, jint);
      static ::java::util::Spliterator$OfInt spliterator(const JArray< jint > &, jint, jint);
      static ::java::util::Spliterator$OfLong spliterator(const JArray< jlong > &, jint, jint);
      static ::java::util::Spliterator spliterator(const JArray< ::java::lang::Object > &, jint, jint);
      static ::java::lang::String toString(const JArray< jbyte > &);
      static ::java::lang::String toString(const JArray< jchar > &);
      static ::java::lang::String toString(const JArray< jdouble > &);
      static ::java::lang::String toString(const JArray< jfloat > &);
      static ::java::lang::String toString(const JArray< jint > &);
      static ::java::lang::String toString(const JArray< jlong > &);
      static ::java::lang::String toString(const JArray< ::java::lang::Object > &);
      static ::java::lang::String toString(const JArray< jshort > &);
      static ::java::lang::String toString(const JArray< jboolean > &);
    };
  }
}

#include <Python.h>

namespace java {
  namespace util {
    extern PyType_Def PY_TYPE_DEF(Arrays);
    extern PyTypeObject *PY_TYPE(Arrays);

    class t_Arrays {
    public:
      PyObject_HEAD
      Arrays object;
      static PyObject *wrap_Object(const Arrays&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
