#ifndef org_apache_lucene_util_AttributeSource_H
#define org_apache_lucene_util_AttributeSource_H

#include "java/lang/Object.h"

namespace java {
  namespace util {
    class Iterator;
  }
  namespace lang {
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class AttributeFactory;
        class Attribute;
        class AttributeSource;
        class AttributeSource$State;
        class AttributeImpl;
        class AttributeReflector;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        class AttributeSource : public ::java::lang::Object {
         public:
          enum {
            mid_init$_8e1955e8a9db094a,
            mid_init$_0ef2017c031e6690,
            mid_addAttribute_0a7f651a88c12737,
            mid_addAttributeImpl_be2b860579c88c21,
            mid_captureState_b6b95521742ee177,
            mid_clearAttributes_8e1955e8a9db094a,
            mid_cloneAttributes_c7e50d2f7edf9549,
            mid_copyTo_fea390f89bfa7c8f,
            mid_endAttributes_8e1955e8a9db094a,
            mid_equals_95c645439e1de637,
            mid_getAttribute_0a7f651a88c12737,
            mid_getAttributeClassesIterator_44488a5d2e640930,
            mid_getAttributeFactory_66e2776a38607360,
            mid_getAttributeImplsIterator_44488a5d2e640930,
            mid_hasAttribute_8971b9d5e299bf35,
            mid_hasAttributes_b61c635e27ed4ce7,
            mid_hashCode_ebe7ab370a509c13,
            mid_reflectAsString_d8d62802d35b75e2,
            mid_reflectWith_6fbf813cd5ff02c8,
            mid_removeAllAttributes_8e1955e8a9db094a,
            mid_restoreState_c4cc6b1cb2354e7f,
            mid_toString_a59eabb26a802fa9,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit AttributeSource(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL && mids$ == NULL)
              env->getClass(initializeClass);
          }
          AttributeSource(const AttributeSource& obj) : ::java::lang::Object(obj) {}

          AttributeSource();
          AttributeSource(const ::org::apache::lucene::util::AttributeFactory &);

          ::org::apache::lucene::util::Attribute addAttribute(const ::java::lang::Class &) const;
          void addAttributeImpl(const ::org::apache::lucene::util::AttributeImpl &) const;
          ::org::apache::lucene::util::AttributeSource$State captureState() const;
          void clearAttributes() const;
          AttributeSource cloneAttributes() const;
          void copyTo(const AttributeSource &) const;
          void endAttributes() const;
          jboolean equals(const ::java::lang::Object &) const;
          ::org::apache::lucene::util::Attribute getAttribute(const ::java::lang::Class &) const;
          ::java::util::Iterator getAttributeClassesIterator() const;
          ::org::apache::lucene::util::AttributeFactory getAttributeFactory() const;
          ::java::util::Iterator getAttributeImplsIterator() const;
          jboolean hasAttribute(const ::java::lang::Class &) const;
          jboolean hasAttributes() const;
          jint hashCode() const;
          ::java::lang::String reflectAsString(jboolean) const;
          void reflectWith(const ::org::apache::lucene::util::AttributeReflector &) const;
          void removeAllAttributes() const;
          void restoreState(const ::org::apache::lucene::util::AttributeSource$State &) const;
          ::java::lang::String toString() const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        extern PyType_Def PY_TYPE_DEF(AttributeSource);
        extern PyTypeObject *PY_TYPE(AttributeSource);

        class t_AttributeSource {
        public:
          PyObject_HEAD
          AttributeSource object;
          static PyObject *wrap_Object(const AttributeSource&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
