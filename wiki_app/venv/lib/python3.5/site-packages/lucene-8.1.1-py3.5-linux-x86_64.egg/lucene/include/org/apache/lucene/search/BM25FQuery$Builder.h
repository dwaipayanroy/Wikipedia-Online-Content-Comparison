#ifndef org_apache_lucene_search_BM25FQuery$Builder_H
#define org_apache_lucene_search_BM25FQuery$Builder_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class BytesRef;
      }
      namespace search {
        class BM25FQuery;
        class BM25FQuery$Builder;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        class BM25FQuery$Builder : public ::java::lang::Object {
         public:
          enum {
            mid_init$_8e1955e8a9db094a,
            mid_init$_a0ef8edda36c7db0,
            mid_addField_671b5e588d6a6569,
            mid_addField_3edd596d2396e5a7,
            mid_addTerm_ed13e584ca20d1e5,
            mid_build_3787ad14ffcdf07b,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit BM25FQuery$Builder(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL && mids$ == NULL)
              env->getClass(initializeClass);
          }
          BM25FQuery$Builder(const BM25FQuery$Builder& obj) : ::java::lang::Object(obj) {}

          BM25FQuery$Builder();
          BM25FQuery$Builder(jfloat, jfloat);

          BM25FQuery$Builder addField(const ::java::lang::String &) const;
          BM25FQuery$Builder addField(const ::java::lang::String &, jfloat) const;
          BM25FQuery$Builder addTerm(const ::org::apache::lucene::util::BytesRef &) const;
          ::org::apache::lucene::search::BM25FQuery build() const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        extern PyType_Def PY_TYPE_DEF(BM25FQuery$Builder);
        extern PyTypeObject *PY_TYPE(BM25FQuery$Builder);

        class t_BM25FQuery$Builder {
        public:
          PyObject_HEAD
          BM25FQuery$Builder object;
          static PyObject *wrap_Object(const BM25FQuery$Builder&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
