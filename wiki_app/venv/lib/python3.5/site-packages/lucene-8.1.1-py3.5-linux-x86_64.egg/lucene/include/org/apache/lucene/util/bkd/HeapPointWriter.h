#ifndef org_apache_lucene_util_bkd_HeapPointWriter_H
#define org_apache_lucene_util_bkd_HeapPointWriter_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          class PointWriter;
          class PointReader;
          class PointValue;
        }
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          class HeapPointWriter : public ::java::lang::Object {
           public:
            enum {
              mid_init$_ce83a7763fbf1810,
              mid_append_ae797b7b511b55c6,
              mid_append_e71b2fd94d730932,
              mid_close_8e1955e8a9db094a,
              mid_count_e0866fd7ad03cc05,
              mid_destroy_8e1955e8a9db094a,
              mid_getPackedValueSlice_b801f0b8ad463f19,
              mid_getReader_54cb0c69d116bb74,
              mid_swap_ce83a7763fbf1810,
              mid_toString_a59eabb26a802fa9,
              max_mid
            };

            enum {
              fid_block,
              fid_docIDs,
              max_fid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static jfieldID *fids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit HeapPointWriter(jobject obj) : ::java::lang::Object(obj) {
              if (obj != NULL && mids$ == NULL)
                env->getClass(initializeClass);
            }
            HeapPointWriter(const HeapPointWriter& obj) : ::java::lang::Object(obj) {}

            JArray< jbyte > _get_block() const;
            JArray< jint > _get_docIDs() const;

            HeapPointWriter(jint, jint);

            void append(const ::org::apache::lucene::util::bkd::PointValue &) const;
            void append(const JArray< jbyte > &, jint) const;
            void close() const;
            jlong count() const;
            void destroy() const;
            ::org::apache::lucene::util::bkd::PointValue getPackedValueSlice(jint) const;
            ::org::apache::lucene::util::bkd::PointReader getReader(jlong, jlong) const;
            void swap(jint, jint) const;
            ::java::lang::String toString() const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          extern PyType_Def PY_TYPE_DEF(HeapPointWriter);
          extern PyTypeObject *PY_TYPE(HeapPointWriter);

          class t_HeapPointWriter {
          public:
            PyObject_HEAD
            HeapPointWriter object;
            static PyObject *wrap_Object(const HeapPointWriter&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
