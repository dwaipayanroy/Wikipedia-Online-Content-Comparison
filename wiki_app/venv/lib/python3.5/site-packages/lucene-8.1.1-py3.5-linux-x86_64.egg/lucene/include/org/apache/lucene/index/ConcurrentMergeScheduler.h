#ifndef org_apache_lucene_index_ConcurrentMergeScheduler_H
#define org_apache_lucene_index_ConcurrentMergeScheduler_H

#include "org/apache/lucene/index/MergeScheduler.h"

namespace java {
  namespace io {
    class IOException;
  }
  namespace lang {
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        class MergeTrigger;
        class IndexWriter;
        class MergePolicy$OneMerge;
      }
      namespace store {
        class Directory;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        class ConcurrentMergeScheduler : public ::org::apache::lucene::index::MergeScheduler {
         public:
          enum {
            mid_init$_8e1955e8a9db094a,
            mid_close_8e1955e8a9db094a,
            mid_disableAutoIOThrottle_8e1955e8a9db094a,
            mid_enableAutoIOThrottle_8e1955e8a9db094a,
            mid_getAutoIOThrottle_b61c635e27ed4ce7,
            mid_getForceMergeMBPerSec_dbe9ce177340961e,
            mid_getIORateLimitMBPerSec_dbe9ce177340961e,
            mid_getMaxMergeCount_ebe7ab370a509c13,
            mid_getMaxThreadCount_ebe7ab370a509c13,
            mid_merge_feb6b6033bdaa6c5,
            mid_mergeThreadCount_ebe7ab370a509c13,
            mid_setDefaultMaxMergesAndThreads_cfd4ba314e3c83fb,
            mid_setForceMergeMBPerSec_c3a3feb3c744702e,
            mid_setMaxMergesAndThreads_ce83a7763fbf1810,
            mid_sync_8e1955e8a9db094a,
            mid_toString_a59eabb26a802fa9,
            mid_wrapForMerge_15351ead16282ed4,
            mid_handleMergeException_f1b031bb96bd17d5,
            mid_updateMergeThreads_8e1955e8a9db094a,
            mid_maybeStall_c1018efb06b4fe73,
            mid_doStall_8e1955e8a9db094a,
            mid_doMerge_7305ae6391cc5a4f,
            mid_getMergeThread_c8078d228a2fc1b3,
            mid_targetMBPerSecChanged_8e1955e8a9db094a,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit ConcurrentMergeScheduler(jobject obj) : ::org::apache::lucene::index::MergeScheduler(obj) {
            if (obj != NULL && mids$ == NULL)
              env->getClass(initializeClass);
          }
          ConcurrentMergeScheduler(const ConcurrentMergeScheduler& obj) : ::org::apache::lucene::index::MergeScheduler(obj) {}

          static jint AUTO_DETECT_MERGES_AND_THREADS;
          static ::java::lang::String *DEFAULT_CPU_CORE_COUNT_PROPERTY;
          static ::java::lang::String *DEFAULT_SPINS_PROPERTY;

          ConcurrentMergeScheduler();

          void close() const;
          void disableAutoIOThrottle() const;
          void enableAutoIOThrottle() const;
          jboolean getAutoIOThrottle() const;
          jdouble getForceMergeMBPerSec() const;
          jdouble getIORateLimitMBPerSec() const;
          jint getMaxMergeCount() const;
          jint getMaxThreadCount() const;
          void merge(const ::org::apache::lucene::index::IndexWriter &, const ::org::apache::lucene::index::MergeTrigger &, jboolean) const;
          jint mergeThreadCount() const;
          void setDefaultMaxMergesAndThreads(jboolean) const;
          void setForceMergeMBPerSec(jdouble) const;
          void setMaxMergesAndThreads(jint, jint) const;
          void sync() const;
          ::java::lang::String toString() const;
          ::org::apache::lucene::store::Directory wrapForMerge(const ::org::apache::lucene::index::MergePolicy$OneMerge &, const ::org::apache::lucene::store::Directory &) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        extern PyType_Def PY_TYPE_DEF(ConcurrentMergeScheduler);
        extern PyTypeObject *PY_TYPE(ConcurrentMergeScheduler);

        class t_ConcurrentMergeScheduler {
        public:
          PyObject_HEAD
          ConcurrentMergeScheduler object;
          static PyObject *wrap_Object(const ConcurrentMergeScheduler&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
