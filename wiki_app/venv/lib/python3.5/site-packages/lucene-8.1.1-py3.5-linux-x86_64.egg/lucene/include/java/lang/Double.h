#ifndef java_lang_Double_H
#define java_lang_Double_H

#include "java/lang/Number.h"

namespace java {
  namespace lang {
    class Object;
    class Comparable;
    class String;
    class NumberFormatException;
    class Double;
    class Class;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class Double : public ::java::lang::Number {
     public:
      enum {
        mid_init$_f23cb8ed8bef391c,
        mid_init$_c3a3feb3c744702e,
        mid_byteValue_05e841c8d0c07537,
        mid_compare_d863df7ebdb7a442,
        mid_compareTo_994152afc4273096,
        mid_doubleToLongBits_9d63037d021efa29,
        mid_doubleToRawLongBits_9d63037d021efa29,
        mid_doubleValue_dbe9ce177340961e,
        mid_equals_95c645439e1de637,
        mid_floatValue_9c0456e344056ea9,
        mid_hashCode_ebe7ab370a509c13,
        mid_hashCode_08b108a270a566e5,
        mid_intValue_ebe7ab370a509c13,
        mid_isFinite_28a9e3381802d1f3,
        mid_isInfinite_b61c635e27ed4ce7,
        mid_isInfinite_28a9e3381802d1f3,
        mid_isNaN_b61c635e27ed4ce7,
        mid_isNaN_28a9e3381802d1f3,
        mid_longBitsToDouble_e370b1f77aee4bcc,
        mid_longValue_e0866fd7ad03cc05,
        mid_max_0e44fee8dd7ce005,
        mid_min_0e44fee8dd7ce005,
        mid_parseDouble_506bf0eeae94ad07,
        mid_shortValue_ca93f121c262a7d3,
        mid_sum_0e44fee8dd7ce005,
        mid_toHexString_bac4d24757628c01,
        mid_toString_a59eabb26a802fa9,
        mid_toString_bac4d24757628c01,
        mid_valueOf_18c1092806b61ad0,
        mid_valueOf_444b9aa6206c0320,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Double(jobject obj) : ::java::lang::Number(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      Double(const Double& obj) : ::java::lang::Number(obj) {}

      static jint BYTES;
      static jint MAX_EXPONENT;
      static jdouble MAX_VALUE;
      static jint MIN_EXPONENT;
      static jdouble MIN_NORMAL;
      static jdouble MIN_VALUE;
      static jdouble NEGATIVE_INFINITY;
      static jdouble NaN;
      static jdouble POSITIVE_INFINITY;
      static jint SIZE;
      static ::java::lang::Class *TYPE;

      Double(const ::java::lang::String &);
      Double(jdouble);

      jbyte byteValue() const;
      static jint compare(jdouble, jdouble);
      jint compareTo(const Double &) const;
      static jlong doubleToLongBits(jdouble);
      static jlong doubleToRawLongBits(jdouble);
      jdouble doubleValue() const;
      jboolean equals(const ::java::lang::Object &) const;
      jfloat floatValue() const;
      jint hashCode() const;
      static jint hashCode(jdouble);
      jint intValue() const;
      static jboolean isFinite(jdouble);
      jboolean isInfinite() const;
      static jboolean isInfinite(jdouble);
      jboolean isNaN() const;
      static jboolean isNaN(jdouble);
      static jdouble longBitsToDouble(jlong);
      jlong longValue() const;
      static jdouble max$(jdouble, jdouble);
      static jdouble min$(jdouble, jdouble);
      static jdouble parseDouble(const ::java::lang::String &);
      jshort shortValue() const;
      static jdouble sum(jdouble, jdouble);
      static ::java::lang::String toHexString(jdouble);
      ::java::lang::String toString() const;
      static ::java::lang::String toString(jdouble);
      static Double valueOf(const ::java::lang::String &);
      static Double valueOf(jdouble);
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyType_Def PY_TYPE_DEF(Double);
    extern PyTypeObject *PY_TYPE(Double);

    class t_Double {
    public:
      PyObject_HEAD
      Double object;
      static PyObject *wrap_Object(const Double&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
