#ifndef java_nio_file_Files_H
#define java_nio_file_Files_H

#include "java/lang/Object.h"

namespace java {
  namespace nio {
    namespace file {
      class FileVisitor;
      class Path;
      class CopyOption;
      class FileStore;
      class OpenOption;
      class LinkOption;
      class DirectoryStream$Filter;
      class DirectoryStream;
      class FileVisitOption;
    }
  }
  namespace io {
    class OutputStream;
    class BufferedReader;
    class IOException;
    class BufferedWriter;
    class InputStream;
  }
  namespace util {
    class Set;
    class List;
    class Map;
  }
  namespace lang {
    class CharSequence;
    class Iterable;
    class String;
    class Class;
  }
}
template<class T> class JArray;

namespace java {
  namespace nio {
    namespace file {

      class Files : public ::java::lang::Object {
       public:
        enum {
          mid_copy_848332d92c3064e5,
          mid_copy_71a3cb27ba09bc27,
          mid_copy_cea7fd676c897233,
          mid_createLink_58d297320ec7763d,
          mid_delete_dbbf903934157cc2,
          mid_deleteIfExists_d9427ee75a1c1e54,
          mid_exists_511c6b61470d59dd,
          mid_getAttribute_cd9c33f97aba849b,
          mid_getFileStore_0fe4fef36ae5a485,
          mid_isDirectory_511c6b61470d59dd,
          mid_isExecutable_d9427ee75a1c1e54,
          mid_isHidden_d9427ee75a1c1e54,
          mid_isReadable_d9427ee75a1c1e54,
          mid_isRegularFile_511c6b61470d59dd,
          mid_isSameFile_52b280fcc6356647,
          mid_isSymbolicLink_d9427ee75a1c1e54,
          mid_isWritable_d9427ee75a1c1e54,
          mid_move_cea7fd676c897233,
          mid_newBufferedReader_dd41d17dad850492,
          mid_newBufferedWriter_7714e47a0d18fcfd,
          mid_newDirectoryStream_b3b189d591b66665,
          mid_newDirectoryStream_05a485b88f68fa9c,
          mid_newDirectoryStream_72f9efad9ec81046,
          mid_newInputStream_7cdd747ba52148f0,
          mid_newOutputStream_faafbd8087ef55aa,
          mid_notExists_511c6b61470d59dd,
          mid_probeContentType_2f4de7b2919c0ba2,
          mid_readAllBytes_814ed4cf438b9496,
          mid_readAllLines_9a45e426e4a3b5a8,
          mid_readAttributes_e1b93c549c08dc0b,
          mid_readSymbolicLink_2c827672f053d4c9,
          mid_setAttribute_7b53ae66b7d96bcb,
          mid_size_41f9c42314ac25a4,
          mid_walkFileTree_0309f8f8667bee3d,
          mid_walkFileTree_0cc61e91e57c63db,
          mid_write_39f8b7ebe0bddae7,
          mid_write_4fbbde51fcfad168,
          max_mid
        };

        static ::java::lang::Class *class$;
        static jmethodID *mids$;
        static bool live$;
        static jclass initializeClass(bool);

        explicit Files(jobject obj) : ::java::lang::Object(obj) {
          if (obj != NULL && mids$ == NULL)
            env->getClass(initializeClass);
        }
        Files(const Files& obj) : ::java::lang::Object(obj) {}

        static jlong copy(const ::java::nio::file::Path &, const ::java::io::OutputStream &);
        static jlong copy(const ::java::io::InputStream &, const ::java::nio::file::Path &, const JArray< ::java::nio::file::CopyOption > &);
        static ::java::nio::file::Path copy(const ::java::nio::file::Path &, const ::java::nio::file::Path &, const JArray< ::java::nio::file::CopyOption > &);
        static ::java::nio::file::Path createLink(const ::java::nio::file::Path &, const ::java::nio::file::Path &);
        static void delete$(const ::java::nio::file::Path &);
        static jboolean deleteIfExists(const ::java::nio::file::Path &);
        static jboolean exists(const ::java::nio::file::Path &, const JArray< ::java::nio::file::LinkOption > &);
        static ::java::lang::Object getAttribute(const ::java::nio::file::Path &, const ::java::lang::String &, const JArray< ::java::nio::file::LinkOption > &);
        static ::java::nio::file::FileStore getFileStore(const ::java::nio::file::Path &);
        static jboolean isDirectory(const ::java::nio::file::Path &, const JArray< ::java::nio::file::LinkOption > &);
        static jboolean isExecutable(const ::java::nio::file::Path &);
        static jboolean isHidden(const ::java::nio::file::Path &);
        static jboolean isReadable(const ::java::nio::file::Path &);
        static jboolean isRegularFile(const ::java::nio::file::Path &, const JArray< ::java::nio::file::LinkOption > &);
        static jboolean isSameFile(const ::java::nio::file::Path &, const ::java::nio::file::Path &);
        static jboolean isSymbolicLink(const ::java::nio::file::Path &);
        static jboolean isWritable(const ::java::nio::file::Path &);
        static ::java::nio::file::Path move(const ::java::nio::file::Path &, const ::java::nio::file::Path &, const JArray< ::java::nio::file::CopyOption > &);
        static ::java::io::BufferedReader newBufferedReader(const ::java::nio::file::Path &);
        static ::java::io::BufferedWriter newBufferedWriter(const ::java::nio::file::Path &, const JArray< ::java::nio::file::OpenOption > &);
        static ::java::nio::file::DirectoryStream newDirectoryStream(const ::java::nio::file::Path &);
        static ::java::nio::file::DirectoryStream newDirectoryStream(const ::java::nio::file::Path &, const ::java::lang::String &);
        static ::java::nio::file::DirectoryStream newDirectoryStream(const ::java::nio::file::Path &, const ::java::nio::file::DirectoryStream$Filter &);
        static ::java::io::InputStream newInputStream(const ::java::nio::file::Path &, const JArray< ::java::nio::file::OpenOption > &);
        static ::java::io::OutputStream newOutputStream(const ::java::nio::file::Path &, const JArray< ::java::nio::file::OpenOption > &);
        static jboolean notExists(const ::java::nio::file::Path &, const JArray< ::java::nio::file::LinkOption > &);
        static ::java::lang::String probeContentType(const ::java::nio::file::Path &);
        static JArray< jbyte > readAllBytes(const ::java::nio::file::Path &);
        static ::java::util::List readAllLines(const ::java::nio::file::Path &);
        static ::java::util::Map readAttributes(const ::java::nio::file::Path &, const ::java::lang::String &, const JArray< ::java::nio::file::LinkOption > &);
        static ::java::nio::file::Path readSymbolicLink(const ::java::nio::file::Path &);
        static ::java::nio::file::Path setAttribute(const ::java::nio::file::Path &, const ::java::lang::String &, const ::java::lang::Object &, const JArray< ::java::nio::file::LinkOption > &);
        static jlong size(const ::java::nio::file::Path &);
        static ::java::nio::file::Path walkFileTree(const ::java::nio::file::Path &, const ::java::nio::file::FileVisitor &);
        static ::java::nio::file::Path walkFileTree(const ::java::nio::file::Path &, const ::java::util::Set &, jint, const ::java::nio::file::FileVisitor &);
        static ::java::nio::file::Path write(const ::java::nio::file::Path &, const JArray< jbyte > &, const JArray< ::java::nio::file::OpenOption > &);
        static ::java::nio::file::Path write(const ::java::nio::file::Path &, const ::java::lang::Iterable &, const JArray< ::java::nio::file::OpenOption > &);
      };
    }
  }
}

#include <Python.h>

namespace java {
  namespace nio {
    namespace file {
      extern PyType_Def PY_TYPE_DEF(Files);
      extern PyTypeObject *PY_TYPE(Files);

      class t_Files {
      public:
        PyObject_HEAD
        Files object;
        static PyObject *wrap_Object(const Files&);
        static PyObject *wrap_jobject(const jobject&);
        static void install(PyObject *module);
        static void initialize(PyObject *module);
      };
    }
  }
}

#endif
