#ifndef org_apache_lucene_spatial3d_geom_PlanetModel_H
#define org_apache_lucene_spatial3d_geom_PlanetModel_H

#include "java/lang/Object.h"

namespace java {
  namespace io {
    class OutputStream;
    class IOException;
    class InputStream;
  }
  namespace lang {
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          class PlanetModel;
          class Vector;
          class GeoPoint;
          class SerializableObject;
        }
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          class PlanetModel : public ::java::lang::Object {
           public:
            enum {
              mid_init$_806fa04433e1b8c9,
              mid_init$_fe870127c9b5fd7b,
              mid_bisection_887e639a7bdb4173,
              mid_createSurfacePoint_1a95ec1458f975ca,
              mid_createSurfacePoint_e8edf9d6605373e7,
              mid_equals_95c645439e1de637,
              mid_getMaximumMagnitude_dbe9ce177340961e,
              mid_getMaximumXValue_dbe9ce177340961e,
              mid_getMaximumYValue_dbe9ce177340961e,
              mid_getMaximumZValue_dbe9ce177340961e,
              mid_getMinimumMagnitude_dbe9ce177340961e,
              mid_getMinimumXValue_dbe9ce177340961e,
              mid_getMinimumYValue_dbe9ce177340961e,
              mid_getMinimumZValue_dbe9ce177340961e,
              mid_hashCode_ebe7ab370a509c13,
              mid_isSphere_b61c635e27ed4ce7,
              mid_pointOnSurface_f03033ab6a62a8d9,
              mid_pointOnSurface_bce6a69d069aa6ba,
              mid_pointOutside_f03033ab6a62a8d9,
              mid_pointOutside_bce6a69d069aa6ba,
              mid_surfaceDistance_4529f7ee4b8a87ed,
              mid_surfacePointOnBearing_1710976db91d76dd,
              mid_toString_a59eabb26a802fa9,
              mid_write_f504a452125cc9e5,
              max_mid
            };

            enum {
              fid_MAX_X_POLE,
              fid_MAX_Y_POLE,
              fid_MIN_X_POLE,
              fid_MIN_Y_POLE,
              fid_NORTH_POLE,
              fid_SOUTH_POLE,
              fid_ab,
              fid_c,
              fid_flattening,
              fid_inverseAb,
              fid_inverseAbSquared,
              fid_inverseC,
              fid_inverseCSquared,
              fid_inverseScale,
              fid_minimumPoleDistance,
              fid_scale,
              fid_squareRatio,
              max_fid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static jfieldID *fids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit PlanetModel(jobject obj) : ::java::lang::Object(obj) {
              if (obj != NULL && mids$ == NULL)
                env->getClass(initializeClass);
            }
            PlanetModel(const PlanetModel& obj) : ::java::lang::Object(obj) {}

            static PlanetModel *SPHERE;
            static PlanetModel *WGS84;
            static jdouble WGS84_EQUATORIAL;
            static jdouble WGS84_MEAN;
            static jdouble WGS84_POLAR;

            ::org::apache::lucene::spatial3d::geom::GeoPoint _get_MAX_X_POLE() const;
            ::org::apache::lucene::spatial3d::geom::GeoPoint _get_MAX_Y_POLE() const;
            ::org::apache::lucene::spatial3d::geom::GeoPoint _get_MIN_X_POLE() const;
            ::org::apache::lucene::spatial3d::geom::GeoPoint _get_MIN_Y_POLE() const;
            ::org::apache::lucene::spatial3d::geom::GeoPoint _get_NORTH_POLE() const;
            ::org::apache::lucene::spatial3d::geom::GeoPoint _get_SOUTH_POLE() const;
            jdouble _get_ab() const;
            jdouble _get_c() const;
            jdouble _get_flattening() const;
            jdouble _get_inverseAb() const;
            jdouble _get_inverseAbSquared() const;
            jdouble _get_inverseC() const;
            jdouble _get_inverseCSquared() const;
            jdouble _get_inverseScale() const;
            jdouble _get_minimumPoleDistance() const;
            jdouble _get_scale() const;
            jdouble _get_squareRatio() const;

            PlanetModel(const ::java::io::InputStream &);
            PlanetModel(jdouble, jdouble);

            ::org::apache::lucene::spatial3d::geom::GeoPoint bisection(const ::org::apache::lucene::spatial3d::geom::GeoPoint &, const ::org::apache::lucene::spatial3d::geom::GeoPoint &) const;
            ::org::apache::lucene::spatial3d::geom::GeoPoint createSurfacePoint(const ::org::apache::lucene::spatial3d::geom::Vector &) const;
            ::org::apache::lucene::spatial3d::geom::GeoPoint createSurfacePoint(jdouble, jdouble, jdouble) const;
            jboolean equals(const ::java::lang::Object &) const;
            jdouble getMaximumMagnitude() const;
            jdouble getMaximumXValue() const;
            jdouble getMaximumYValue() const;
            jdouble getMaximumZValue() const;
            jdouble getMinimumMagnitude() const;
            jdouble getMinimumXValue() const;
            jdouble getMinimumYValue() const;
            jdouble getMinimumZValue() const;
            jint hashCode() const;
            jboolean isSphere() const;
            jboolean pointOnSurface(const ::org::apache::lucene::spatial3d::geom::Vector &) const;
            jboolean pointOnSurface(jdouble, jdouble, jdouble) const;
            jboolean pointOutside(const ::org::apache::lucene::spatial3d::geom::Vector &) const;
            jboolean pointOutside(jdouble, jdouble, jdouble) const;
            jdouble surfaceDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint &, const ::org::apache::lucene::spatial3d::geom::GeoPoint &) const;
            ::org::apache::lucene::spatial3d::geom::GeoPoint surfacePointOnBearing(const ::org::apache::lucene::spatial3d::geom::GeoPoint &, jdouble, jdouble) const;
            ::java::lang::String toString() const;
            void write(const ::java::io::OutputStream &) const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          extern PyType_Def PY_TYPE_DEF(PlanetModel);
          extern PyTypeObject *PY_TYPE(PlanetModel);

          class t_PlanetModel {
          public:
            PyObject_HEAD
            PlanetModel object;
            static PyObject *wrap_Object(const PlanetModel&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
