#ifndef org_apache_lucene_util_CharsRefBuilder_H
#define org_apache_lucene_util_CharsRefBuilder_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class CharSequence;
    class Appendable;
    class Class;
    class String;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class CharsRefBuilder;
        class BytesRef;
        class CharsRef;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        class CharsRefBuilder : public ::java::lang::Object {
         public:
          enum {
            mid_init$_8e1955e8a9db094a,
            mid_append_77396e5e2ec5213a,
            mid_append_2b9d3cc764032e98,
            mid_append_ea931aae960c632d,
            mid_append_1dd8f12108786554,
            mid_charAt_cb77cd15fd3c4542,
            mid_chars_524cd17fedb51d3c,
            mid_clear_8e1955e8a9db094a,
            mid_copyChars_be6b3ce2e27018c9,
            mid_copyChars_ea931aae960c632d,
            mid_copyUTF8Bytes_e1a9e7b7c7c5c82a,
            mid_copyUTF8Bytes_7fc0bf56a271cd51,
            mid_equals_95c645439e1de637,
            mid_get_3f7f557d09a22a83,
            mid_grow_36df8fa8e39fb5cc,
            mid_hashCode_ebe7ab370a509c13,
            mid_length_ebe7ab370a509c13,
            mid_setCharAt_caf4d05dfcaf07c9,
            mid_setLength_36df8fa8e39fb5cc,
            mid_toCharsRef_3f7f557d09a22a83,
            mid_toString_a59eabb26a802fa9,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit CharsRefBuilder(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL && mids$ == NULL)
              env->getClass(initializeClass);
          }
          CharsRefBuilder(const CharsRefBuilder& obj) : ::java::lang::Object(obj) {}

          CharsRefBuilder();

          CharsRefBuilder append(jchar) const;
          CharsRefBuilder append(const ::java::lang::CharSequence &) const;
          void append(const JArray< jchar > &, jint, jint) const;
          CharsRefBuilder append(const ::java::lang::CharSequence &, jint, jint) const;
          jchar charAt(jint) const;
          JArray< jchar > chars() const;
          void clear() const;
          void copyChars(const ::org::apache::lucene::util::CharsRef &) const;
          void copyChars(const JArray< jchar > &, jint, jint) const;
          void copyUTF8Bytes(const ::org::apache::lucene::util::BytesRef &) const;
          void copyUTF8Bytes(const JArray< jbyte > &, jint, jint) const;
          jboolean equals(const ::java::lang::Object &) const;
          ::org::apache::lucene::util::CharsRef get() const;
          void grow(jint) const;
          jint hashCode() const;
          jint length() const;
          void setCharAt(jint, jchar) const;
          void setLength(jint) const;
          ::org::apache::lucene::util::CharsRef toCharsRef() const;
          ::java::lang::String toString() const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        extern PyType_Def PY_TYPE_DEF(CharsRefBuilder);
        extern PyTypeObject *PY_TYPE(CharsRefBuilder);

        class t_CharsRefBuilder {
        public:
          PyObject_HEAD
          CharsRefBuilder object;
          static PyObject *wrap_Object(const CharsRefBuilder&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
