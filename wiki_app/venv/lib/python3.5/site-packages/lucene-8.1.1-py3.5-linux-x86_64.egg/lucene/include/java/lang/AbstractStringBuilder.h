#ifndef java_lang_AbstractStringBuilder_H
#define java_lang_AbstractStringBuilder_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class AbstractStringBuilder;
    class String;
    class CharSequence;
    class StringBuffer;
    class Appendable;
    class Class;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class AbstractStringBuilder : public ::java::lang::Object {
     public:
      enum {
        mid_append_21fc98aaca1070af,
        mid_append_264066c548f84a1a,
        mid_append_80112b4eb8abb184,
        mid_append_2bddeaa2cd3c4658,
        mid_append_0e37a17474ebe08d,
        mid_append_cfa50394cac81718,
        mid_append_37542028f98b718e,
        mid_append_12aab0ddd61d8ca0,
        mid_append_d4a56c63ccd8b896,
        mid_append_735394c328be92fe,
        mid_append_4b5394accc8e0554,
        mid_append_36f4b7ac5375d6a0,
        mid_append_ec7133c4fdc9e69f,
        mid_appendCodePoint_12aab0ddd61d8ca0,
        mid_capacity_ebe7ab370a509c13,
        mid_charAt_cb77cd15fd3c4542,
        mid_codePointAt_31c387e1be87ebd7,
        mid_codePointBefore_31c387e1be87ebd7,
        mid_codePointCount_28fd57ae44f76a2e,
        mid_delete_7f2de1db1a697608,
        mid_deleteCharAt_12aab0ddd61d8ca0,
        mid_ensureCapacity_36df8fa8e39fb5cc,
        mid_getChars_b938b18cf768e5fb,
        mid_indexOf_354c0569c95d5178,
        mid_indexOf_7b98af938793e116,
        mid_insert_979c4e708dd2919c,
        mid_insert_3d9e4084bad6618f,
        mid_insert_5f47f761ca72cd5c,
        mid_insert_48e945ab518b47ea,
        mid_insert_44135347713731ac,
        mid_insert_0c22378f01bf04a6,
        mid_insert_7f2de1db1a697608,
        mid_insert_2857609d9ef686bd,
        mid_insert_eaf89b19fef6d651,
        mid_insert_13911cd1a961b149,
        mid_insert_c3dd59a077587c34,
        mid_insert_af1d785b969bab82,
        mid_lastIndexOf_354c0569c95d5178,
        mid_lastIndexOf_7b98af938793e116,
        mid_length_ebe7ab370a509c13,
        mid_offsetByCodePoints_28fd57ae44f76a2e,
        mid_replace_90af48ab92425126,
        mid_reverse_f29c828e74a76a91,
        mid_setCharAt_caf4d05dfcaf07c9,
        mid_setLength_36df8fa8e39fb5cc,
        mid_subSequence_2ce1d56f2beed3ed,
        mid_substring_051f7871497adf6a,
        mid_substring_d1f393259271740d,
        mid_toString_a59eabb26a802fa9,
        mid_trimToSize_8e1955e8a9db094a,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit AbstractStringBuilder(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      AbstractStringBuilder(const AbstractStringBuilder& obj) : ::java::lang::Object(obj) {}

      AbstractStringBuilder append(const ::java::lang::StringBuffer &) const;
      AbstractStringBuilder append(const JArray< jchar > &) const;
      AbstractStringBuilder append(const ::java::lang::String &) const;
      AbstractStringBuilder append(jboolean) const;
      AbstractStringBuilder append(jchar) const;
      AbstractStringBuilder append(jdouble) const;
      AbstractStringBuilder append(jfloat) const;
      AbstractStringBuilder append(jint) const;
      AbstractStringBuilder append(const ::java::lang::CharSequence &) const;
      AbstractStringBuilder append(const ::java::lang::Object &) const;
      AbstractStringBuilder append(jlong) const;
      AbstractStringBuilder append(const JArray< jchar > &, jint, jint) const;
      AbstractStringBuilder append(const ::java::lang::CharSequence &, jint, jint) const;
      AbstractStringBuilder appendCodePoint(jint) const;
      jint capacity() const;
      jchar charAt(jint) const;
      jint codePointAt(jint) const;
      jint codePointBefore(jint) const;
      jint codePointCount(jint, jint) const;
      AbstractStringBuilder delete$(jint, jint) const;
      AbstractStringBuilder deleteCharAt(jint) const;
      void ensureCapacity(jint) const;
      void getChars(jint, jint, const JArray< jchar > &, jint) const;
      jint indexOf(const ::java::lang::String &) const;
      jint indexOf(const ::java::lang::String &, jint) const;
      AbstractStringBuilder insert(jint, const JArray< jchar > &) const;
      AbstractStringBuilder insert(jint, const ::java::lang::String &) const;
      AbstractStringBuilder insert(jint, jboolean) const;
      AbstractStringBuilder insert(jint, jchar) const;
      AbstractStringBuilder insert(jint, jdouble) const;
      AbstractStringBuilder insert(jint, jfloat) const;
      AbstractStringBuilder insert(jint, jint) const;
      AbstractStringBuilder insert(jint, const ::java::lang::CharSequence &) const;
      AbstractStringBuilder insert(jint, const ::java::lang::Object &) const;
      AbstractStringBuilder insert(jint, jlong) const;
      AbstractStringBuilder insert(jint, const JArray< jchar > &, jint, jint) const;
      AbstractStringBuilder insert(jint, const ::java::lang::CharSequence &, jint, jint) const;
      jint lastIndexOf(const ::java::lang::String &) const;
      jint lastIndexOf(const ::java::lang::String &, jint) const;
      jint length() const;
      jint offsetByCodePoints(jint, jint) const;
      AbstractStringBuilder replace(jint, jint, const ::java::lang::String &) const;
      AbstractStringBuilder reverse() const;
      void setCharAt(jint, jchar) const;
      void setLength(jint) const;
      ::java::lang::CharSequence subSequence(jint, jint) const;
      ::java::lang::String substring(jint) const;
      ::java::lang::String substring(jint, jint) const;
      ::java::lang::String toString() const;
      void trimToSize() const;
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyType_Def PY_TYPE_DEF(AbstractStringBuilder);
    extern PyTypeObject *PY_TYPE(AbstractStringBuilder);

    class t_AbstractStringBuilder {
    public:
      PyObject_HEAD
      AbstractStringBuilder object;
      static PyObject *wrap_Object(const AbstractStringBuilder&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
