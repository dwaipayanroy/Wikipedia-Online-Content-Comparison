#ifndef java_util_List_H
#define java_util_List_H

#include "java/util/Collection.h"

namespace java {
  namespace util {
    class List;
    class Comparator;
    class Spliterator;
    class ListIterator;
    class Iterator;
  }
  namespace lang {
    class Object;
    class Class;
  }
}
template<class T> class JArray;

namespace java {
  namespace util {

    class List : public ::java::util::Collection {
     public:
      enum {
        mid_add_95c645439e1de637,
        mid_add_0e821780a0dab1f0,
        mid_addAll_08792e0fadda7da1,
        mid_addAll_28b40f46c715cf07,
        mid_clear_8e1955e8a9db094a,
        mid_contains_95c645439e1de637,
        mid_containsAll_08792e0fadda7da1,
        mid_equals_95c645439e1de637,
        mid_get_671c7cb118f40d4b,
        mid_hashCode_ebe7ab370a509c13,
        mid_indexOf_ed8eef7decd0ba4d,
        mid_isEmpty_b61c635e27ed4ce7,
        mid_iterator_44488a5d2e640930,
        mid_lastIndexOf_ed8eef7decd0ba4d,
        mid_listIterator_36a99a61b6d41c68,
        mid_listIterator_b026cdc9628f8d22,
        mid_remove_671c7cb118f40d4b,
        mid_remove_95c645439e1de637,
        mid_removeAll_08792e0fadda7da1,
        mid_retainAll_08792e0fadda7da1,
        mid_set_5fffb77d7b399da4,
        mid_size_ebe7ab370a509c13,
        mid_sort_c23d8fa350d24e39,
        mid_spliterator_5b747feaae07c7a5,
        mid_subList_7222c8b36afa5c9f,
        mid_toArray_ed65e267149e25a2,
        mid_toArray_d8fddc38c6304558,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit List(jobject obj) : ::java::util::Collection(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      List(const List& obj) : ::java::util::Collection(obj) {}

      jboolean add(const ::java::lang::Object &) const;
      void add(jint, const ::java::lang::Object &) const;
      jboolean addAll(const ::java::util::Collection &) const;
      jboolean addAll(jint, const ::java::util::Collection &) const;
      void clear() const;
      jboolean contains(const ::java::lang::Object &) const;
      jboolean containsAll(const ::java::util::Collection &) const;
      jboolean equals(const ::java::lang::Object &) const;
      ::java::lang::Object get(jint) const;
      jint hashCode() const;
      jint indexOf(const ::java::lang::Object &) const;
      jboolean isEmpty() const;
      ::java::util::Iterator iterator() const;
      jint lastIndexOf(const ::java::lang::Object &) const;
      ::java::util::ListIterator listIterator() const;
      ::java::util::ListIterator listIterator(jint) const;
      ::java::lang::Object remove(jint) const;
      jboolean remove(const ::java::lang::Object &) const;
      jboolean removeAll(const ::java::util::Collection &) const;
      jboolean retainAll(const ::java::util::Collection &) const;
      ::java::lang::Object set(jint, const ::java::lang::Object &) const;
      jint size() const;
      void sort(const ::java::util::Comparator &) const;
      ::java::util::Spliterator spliterator() const;
      List subList(jint, jint) const;
      JArray< ::java::lang::Object > toArray() const;
      JArray< ::java::lang::Object > toArray(const JArray< ::java::lang::Object > &) const;
    };
  }
}

#include <Python.h>

namespace java {
  namespace util {
    extern PyType_Def PY_TYPE_DEF(List);
    extern PyTypeObject *PY_TYPE(List);

    class t_List {
    public:
      PyObject_HEAD
      List object;
      PyTypeObject *parameters[1];
      static PyTypeObject **parameters_(t_List *self)
      {
        return (PyTypeObject **) &(self->parameters);
      }
      static PyObject *wrap_Object(const List&);
      static PyObject *wrap_jobject(const jobject&);
      static PyObject *wrap_Object(const List&, PyTypeObject *);
      static PyObject *wrap_jobject(const jobject&, PyTypeObject *);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
