#ifndef java_lang_Thread_H
#define java_lang_Thread_H

#include "java/lang/Object.h"

namespace java {
  namespace util {
    class Map;
  }
  namespace lang {
    class StackTraceElement;
    class ClassLoader;
    class Thread$UncaughtExceptionHandler;
    class Thread;
    class ThreadGroup;
    class Throwable;
    class Thread$State;
    class Runnable;
    class InterruptedException;
    class Class;
    class String;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class Thread : public ::java::lang::Object {
     public:
      enum {
        mid_init$_8e1955e8a9db094a,
        mid_init$_f23cb8ed8bef391c,
        mid_init$_26184cbd09ca2187,
        mid_init$_e2346e19c7a62276,
        mid_init$_b28ad0a47cb3a699,
        mid_init$_628400154333ebc0,
        mid_init$_7452c432c9fa5d27,
        mid_init$_84f7ae0323f2ff3a,
        mid_activeCount_ebe7ab370a509c13,
        mid_checkAccess_8e1955e8a9db094a,
        mid_countStackFrames_ebe7ab370a509c13,
        mid_currentThread_07d7c6b58ea6fe22,
        mid_destroy_8e1955e8a9db094a,
        mid_dumpStack_8e1955e8a9db094a,
        mid_enumerate_b09bed89196879e1,
        mid_getAllStackTraces_776657198fbc9f41,
        mid_getContextClassLoader_61e3d6e2c454a30a,
        mid_getDefaultUncaughtExceptionHandler_8dac0c972d71620e,
        mid_getId_e0866fd7ad03cc05,
        mid_getName_a59eabb26a802fa9,
        mid_getPriority_ebe7ab370a509c13,
        mid_getStackTrace_0b5d1b949a812477,
        mid_getState_4349dc3fab94dce2,
        mid_getThreadGroup_391608936bd09e59,
        mid_getUncaughtExceptionHandler_8dac0c972d71620e,
        mid_holdsLock_95c645439e1de637,
        mid_interrupt_8e1955e8a9db094a,
        mid_interrupted_b61c635e27ed4ce7,
        mid_isAlive_b61c635e27ed4ce7,
        mid_isDaemon_b61c635e27ed4ce7,
        mid_isInterrupted_b61c635e27ed4ce7,
        mid_join_8e1955e8a9db094a,
        mid_join_d89013dae69b2a92,
        mid_join_e17acde661241979,
        mid_resume_8e1955e8a9db094a,
        mid_run_8e1955e8a9db094a,
        mid_setContextClassLoader_063238c5ee1580d7,
        mid_setDaemon_cfd4ba314e3c83fb,
        mid_setDefaultUncaughtExceptionHandler_996f278a1f713475,
        mid_setName_f23cb8ed8bef391c,
        mid_setPriority_36df8fa8e39fb5cc,
        mid_setUncaughtExceptionHandler_996f278a1f713475,
        mid_sleep_d89013dae69b2a92,
        mid_sleep_e17acde661241979,
        mid_start_8e1955e8a9db094a,
        mid_stop_8e1955e8a9db094a,
        mid_stop_8bd0dfc905f9cb61,
        mid_suspend_8e1955e8a9db094a,
        mid_toString_a59eabb26a802fa9,
        mid_yield_8e1955e8a9db094a,
        mid_clone_23bf5655193fd7ea,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Thread(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      Thread(const Thread& obj) : ::java::lang::Object(obj) {}

      static jint MAX_PRIORITY;
      static jint MIN_PRIORITY;
      static jint NORM_PRIORITY;

      Thread();
      Thread(const ::java::lang::String &);
      Thread(const ::java::lang::Runnable &);
      Thread(const ::java::lang::ThreadGroup &, const ::java::lang::String &);
      Thread(const ::java::lang::ThreadGroup &, const ::java::lang::Runnable &);
      Thread(const ::java::lang::Runnable &, const ::java::lang::String &);
      Thread(const ::java::lang::ThreadGroup &, const ::java::lang::Runnable &, const ::java::lang::String &);
      Thread(const ::java::lang::ThreadGroup &, const ::java::lang::Runnable &, const ::java::lang::String &, jlong);

      static jint activeCount();
      void checkAccess() const;
      jint countStackFrames() const;
      static Thread currentThread();
      void destroy() const;
      static void dumpStack();
      static jint enumerate(const JArray< Thread > &);
      static ::java::util::Map getAllStackTraces();
      ::java::lang::ClassLoader getContextClassLoader() const;
      static ::java::lang::Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler();
      jlong getId() const;
      ::java::lang::String getName() const;
      jint getPriority() const;
      JArray< ::java::lang::StackTraceElement > getStackTrace() const;
      ::java::lang::Thread$State getState() const;
      ::java::lang::ThreadGroup getThreadGroup() const;
      ::java::lang::Thread$UncaughtExceptionHandler getUncaughtExceptionHandler() const;
      static jboolean holdsLock(const ::java::lang::Object &);
      void interrupt() const;
      static jboolean interrupted();
      jboolean isAlive() const;
      jboolean isDaemon() const;
      jboolean isInterrupted() const;
      void join() const;
      void join(jlong) const;
      void join(jlong, jint) const;
      void resume() const;
      void run() const;
      void setContextClassLoader(const ::java::lang::ClassLoader &) const;
      void setDaemon(jboolean) const;
      static void setDefaultUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler &);
      void setName(const ::java::lang::String &) const;
      void setPriority(jint) const;
      void setUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler &) const;
      static void sleep(jlong);
      static void sleep(jlong, jint);
      void start() const;
      void stop() const;
      void stop(const ::java::lang::Throwable &) const;
      void suspend() const;
      ::java::lang::String toString() const;
      static void yield();
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyType_Def PY_TYPE_DEF(Thread);
    extern PyTypeObject *PY_TYPE(Thread);

    class t_Thread {
    public:
      PyObject_HEAD
      Thread object;
      static PyObject *wrap_Object(const Thread&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
