#ifndef java_util_regex_Matcher_H
#define java_util_regex_Matcher_H

#include "java/lang/Object.h"

namespace java {
  namespace util {
    namespace regex {
      class Pattern;
      class Matcher;
      class MatchResult;
    }
  }
  namespace lang {
    class StringBuffer;
    class Class;
    class CharSequence;
    class String;
  }
}
template<class T> class JArray;

namespace java {
  namespace util {
    namespace regex {

      class Matcher : public ::java::lang::Object {
       public:
        enum {
          mid_appendReplacement_4d5cc27745105786,
          mid_appendTail_fbbb808ef277f352,
          mid_end_ebe7ab370a509c13,
          mid_end_354c0569c95d5178,
          mid_end_31c387e1be87ebd7,
          mid_find_b61c635e27ed4ce7,
          mid_find_7913d7ee341c2642,
          mid_group_a59eabb26a802fa9,
          mid_group_744f4d1a4f853475,
          mid_group_051f7871497adf6a,
          mid_groupCount_ebe7ab370a509c13,
          mid_hasAnchoringBounds_b61c635e27ed4ce7,
          mid_hasTransparentBounds_b61c635e27ed4ce7,
          mid_hitEnd_b61c635e27ed4ce7,
          mid_lookingAt_b61c635e27ed4ce7,
          mid_matches_b61c635e27ed4ce7,
          mid_pattern_9ea8682e373a983b,
          mid_quoteReplacement_744f4d1a4f853475,
          mid_region_a79304b5d18ae461,
          mid_regionEnd_ebe7ab370a509c13,
          mid_regionStart_ebe7ab370a509c13,
          mid_replaceAll_744f4d1a4f853475,
          mid_replaceFirst_744f4d1a4f853475,
          mid_requireEnd_b61c635e27ed4ce7,
          mid_reset_cee552e335860d55,
          mid_reset_ac8d0eb274145152,
          mid_start_ebe7ab370a509c13,
          mid_start_354c0569c95d5178,
          mid_start_31c387e1be87ebd7,
          mid_toMatchResult_0f5902ddd9f102fc,
          mid_toString_a59eabb26a802fa9,
          mid_useAnchoringBounds_9933154be1899d12,
          mid_usePattern_e35525ad413ef887,
          mid_useTransparentBounds_9933154be1899d12,
          max_mid
        };

        static ::java::lang::Class *class$;
        static jmethodID *mids$;
        static bool live$;
        static jclass initializeClass(bool);

        explicit Matcher(jobject obj) : ::java::lang::Object(obj) {
          if (obj != NULL && mids$ == NULL)
            env->getClass(initializeClass);
        }
        Matcher(const Matcher& obj) : ::java::lang::Object(obj) {}

        Matcher appendReplacement(const ::java::lang::StringBuffer &, const ::java::lang::String &) const;
        ::java::lang::StringBuffer appendTail(const ::java::lang::StringBuffer &) const;
        jint end() const;
        jint end(const ::java::lang::String &) const;
        jint end(jint) const;
        jboolean find() const;
        jboolean find(jint) const;
        ::java::lang::String group() const;
        ::java::lang::String group(const ::java::lang::String &) const;
        ::java::lang::String group(jint) const;
        jint groupCount() const;
        jboolean hasAnchoringBounds() const;
        jboolean hasTransparentBounds() const;
        jboolean hitEnd() const;
        jboolean lookingAt() const;
        jboolean matches() const;
        ::java::util::regex::Pattern pattern() const;
        static ::java::lang::String quoteReplacement(const ::java::lang::String &);
        Matcher region(jint, jint) const;
        jint regionEnd() const;
        jint regionStart() const;
        ::java::lang::String replaceAll(const ::java::lang::String &) const;
        ::java::lang::String replaceFirst(const ::java::lang::String &) const;
        jboolean requireEnd() const;
        Matcher reset() const;
        Matcher reset(const ::java::lang::CharSequence &) const;
        jint start() const;
        jint start(const ::java::lang::String &) const;
        jint start(jint) const;
        ::java::util::regex::MatchResult toMatchResult() const;
        ::java::lang::String toString() const;
        Matcher useAnchoringBounds(jboolean) const;
        Matcher usePattern(const ::java::util::regex::Pattern &) const;
        Matcher useTransparentBounds(jboolean) const;
      };
    }
  }
}

#include <Python.h>

namespace java {
  namespace util {
    namespace regex {
      extern PyType_Def PY_TYPE_DEF(Matcher);
      extern PyTypeObject *PY_TYPE(Matcher);

      class t_Matcher {
      public:
        PyObject_HEAD
        Matcher object;
        static PyObject *wrap_Object(const Matcher&);
        static PyObject *wrap_jobject(const jobject&);
        static void install(PyObject *module);
        static void initialize(PyObject *module);
      };
    }
  }
}

#endif
