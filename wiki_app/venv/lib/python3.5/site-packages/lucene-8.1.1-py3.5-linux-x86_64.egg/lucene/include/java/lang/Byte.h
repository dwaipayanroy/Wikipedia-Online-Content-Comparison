#ifndef java_lang_Byte_H
#define java_lang_Byte_H

#include "java/lang/Number.h"

namespace java {
  namespace lang {
    class Object;
    class Comparable;
    class String;
    class NumberFormatException;
    class Byte;
    class Class;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class Byte : public ::java::lang::Number {
     public:
      enum {
        mid_init$_f23cb8ed8bef391c,
        mid_init$_936db15918436489,
        mid_byteValue_05e841c8d0c07537,
        mid_compare_6f5faaf327aac597,
        mid_compareTo_01406a587bc51e21,
        mid_decode_645412915221ae4c,
        mid_doubleValue_dbe9ce177340961e,
        mid_equals_95c645439e1de637,
        mid_floatValue_9c0456e344056ea9,
        mid_hashCode_ebe7ab370a509c13,
        mid_hashCode_b24b860269fbe110,
        mid_intValue_ebe7ab370a509c13,
        mid_longValue_e0866fd7ad03cc05,
        mid_parseByte_0ba3de711f495d55,
        mid_parseByte_cb489953b3e02784,
        mid_shortValue_ca93f121c262a7d3,
        mid_toString_a59eabb26a802fa9,
        mid_toString_bef4d35e1f2e9141,
        mid_toUnsignedInt_b24b860269fbe110,
        mid_toUnsignedLong_170bf440d03fffa8,
        mid_valueOf_645412915221ae4c,
        mid_valueOf_a8972ec8e1a1274f,
        mid_valueOf_8b06bbab92858e62,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Byte(jobject obj) : ::java::lang::Number(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      Byte(const Byte& obj) : ::java::lang::Number(obj) {}

      static jint BYTES;
      static jbyte MAX_VALUE;
      static jbyte MIN_VALUE;
      static jint SIZE;
      static ::java::lang::Class *TYPE;

      Byte(const ::java::lang::String &);
      Byte(jbyte);

      jbyte byteValue() const;
      static jint compare(jbyte, jbyte);
      jint compareTo(const Byte &) const;
      static Byte decode(const ::java::lang::String &);
      jdouble doubleValue() const;
      jboolean equals(const ::java::lang::Object &) const;
      jfloat floatValue() const;
      jint hashCode() const;
      static jint hashCode(jbyte);
      jint intValue() const;
      jlong longValue() const;
      static jbyte parseByte(const ::java::lang::String &);
      static jbyte parseByte(const ::java::lang::String &, jint);
      jshort shortValue() const;
      ::java::lang::String toString() const;
      static ::java::lang::String toString(jbyte);
      static jint toUnsignedInt(jbyte);
      static jlong toUnsignedLong(jbyte);
      static Byte valueOf(const ::java::lang::String &);
      static Byte valueOf(jbyte);
      static Byte valueOf(const ::java::lang::String &, jint);
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyType_Def PY_TYPE_DEF(Byte);
    extern PyTypeObject *PY_TYPE(Byte);

    class t_Byte {
    public:
      PyObject_HEAD
      Byte object;
      static PyObject *wrap_Object(const Byte&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
