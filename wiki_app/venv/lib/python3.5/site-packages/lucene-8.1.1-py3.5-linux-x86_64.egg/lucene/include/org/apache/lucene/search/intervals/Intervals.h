#ifndef org_apache_lucene_search_intervals_Intervals_H
#define org_apache_lucene_search_intervals_Intervals_H

#include "java/lang/Object.h"

namespace java {
  namespace util {
    class List;
  }
  namespace lang {
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class BytesRef;
      }
      namespace search {
        namespace intervals {
          class IntervalsSource;
        }
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace intervals {

          class Intervals : public ::java::lang::Object {
           public:
            enum {
              mid_after_9d9043855cf615c3,
              mid_atLeast_85180886c4043f7b,
              mid_before_9d9043855cf615c3,
              mid_containedBy_9d9043855cf615c3,
              mid_containing_9d9043855cf615c3,
              mid_extend_288d5c32d3a660b0,
              mid_fixField_3fcfe9d163352544,
              mid_maxgaps_3fc08a8cc0ae46cf,
              mid_maxwidth_3fc08a8cc0ae46cf,
              mid_nonOverlapping_9d9043855cf615c3,
              mid_notContainedBy_9d9043855cf615c3,
              mid_notContaining_9d9043855cf615c3,
              mid_notWithin_ec9c855d6b507fd5,
              mid_or_c06a2d38ff4fd9f3,
              mid_or_3ecfee42807568dd,
              mid_or_afeccafc99972fe3,
              mid_or_07a50cd7306ed074,
              mid_ordered_c06a2d38ff4fd9f3,
              mid_overlapping_9d9043855cf615c3,
              mid_phrase_e721dc776c858f0f,
              mid_phrase_c06a2d38ff4fd9f3,
              mid_prefix_8e054d1e2d8b2932,
              mid_term_8e054d1e2d8b2932,
              mid_term_a4b429fd36baf93d,
              mid_unordered_c06a2d38ff4fd9f3,
              mid_unordered_afeccafc99972fe3,
              mid_wildcard_8e054d1e2d8b2932,
              mid_within_ec9c855d6b507fd5,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit Intervals(jobject obj) : ::java::lang::Object(obj) {
              if (obj != NULL && mids$ == NULL)
                env->getClass(initializeClass);
            }
            Intervals(const Intervals& obj) : ::java::lang::Object(obj) {}

            static ::org::apache::lucene::search::intervals::IntervalsSource after(const ::org::apache::lucene::search::intervals::IntervalsSource &, const ::org::apache::lucene::search::intervals::IntervalsSource &);
            static ::org::apache::lucene::search::intervals::IntervalsSource atLeast(jint, const JArray< ::org::apache::lucene::search::intervals::IntervalsSource > &);
            static ::org::apache::lucene::search::intervals::IntervalsSource before(const ::org::apache::lucene::search::intervals::IntervalsSource &, const ::org::apache::lucene::search::intervals::IntervalsSource &);
            static ::org::apache::lucene::search::intervals::IntervalsSource containedBy(const ::org::apache::lucene::search::intervals::IntervalsSource &, const ::org::apache::lucene::search::intervals::IntervalsSource &);
            static ::org::apache::lucene::search::intervals::IntervalsSource containing(const ::org::apache::lucene::search::intervals::IntervalsSource &, const ::org::apache::lucene::search::intervals::IntervalsSource &);
            static ::org::apache::lucene::search::intervals::IntervalsSource extend(const ::org::apache::lucene::search::intervals::IntervalsSource &, jint, jint);
            static ::org::apache::lucene::search::intervals::IntervalsSource fixField(const ::java::lang::String &, const ::org::apache::lucene::search::intervals::IntervalsSource &);
            static ::org::apache::lucene::search::intervals::IntervalsSource maxgaps(jint, const ::org::apache::lucene::search::intervals::IntervalsSource &);
            static ::org::apache::lucene::search::intervals::IntervalsSource maxwidth(jint, const ::org::apache::lucene::search::intervals::IntervalsSource &);
            static ::org::apache::lucene::search::intervals::IntervalsSource nonOverlapping(const ::org::apache::lucene::search::intervals::IntervalsSource &, const ::org::apache::lucene::search::intervals::IntervalsSource &);
            static ::org::apache::lucene::search::intervals::IntervalsSource notContainedBy(const ::org::apache::lucene::search::intervals::IntervalsSource &, const ::org::apache::lucene::search::intervals::IntervalsSource &);
            static ::org::apache::lucene::search::intervals::IntervalsSource notContaining(const ::org::apache::lucene::search::intervals::IntervalsSource &, const ::org::apache::lucene::search::intervals::IntervalsSource &);
            static ::org::apache::lucene::search::intervals::IntervalsSource notWithin(const ::org::apache::lucene::search::intervals::IntervalsSource &, jint, const ::org::apache::lucene::search::intervals::IntervalsSource &);
            static ::org::apache::lucene::search::intervals::IntervalsSource or$(const JArray< ::org::apache::lucene::search::intervals::IntervalsSource > &);
            static ::org::apache::lucene::search::intervals::IntervalsSource or$(const ::java::util::List &);
            static ::org::apache::lucene::search::intervals::IntervalsSource or$(jboolean, const JArray< ::org::apache::lucene::search::intervals::IntervalsSource > &);
            static ::org::apache::lucene::search::intervals::IntervalsSource or$(jboolean, const ::java::util::List &);
            static ::org::apache::lucene::search::intervals::IntervalsSource ordered(const JArray< ::org::apache::lucene::search::intervals::IntervalsSource > &);
            static ::org::apache::lucene::search::intervals::IntervalsSource overlapping(const ::org::apache::lucene::search::intervals::IntervalsSource &, const ::org::apache::lucene::search::intervals::IntervalsSource &);
            static ::org::apache::lucene::search::intervals::IntervalsSource phrase(const JArray< ::java::lang::String > &);
            static ::org::apache::lucene::search::intervals::IntervalsSource phrase(const JArray< ::org::apache::lucene::search::intervals::IntervalsSource > &);
            static ::org::apache::lucene::search::intervals::IntervalsSource prefix(const ::java::lang::String &);
            static ::org::apache::lucene::search::intervals::IntervalsSource term(const ::java::lang::String &);
            static ::org::apache::lucene::search::intervals::IntervalsSource term(const ::org::apache::lucene::util::BytesRef &);
            static ::org::apache::lucene::search::intervals::IntervalsSource unordered(const JArray< ::org::apache::lucene::search::intervals::IntervalsSource > &);
            static ::org::apache::lucene::search::intervals::IntervalsSource unordered(jboolean, const JArray< ::org::apache::lucene::search::intervals::IntervalsSource > &);
            static ::org::apache::lucene::search::intervals::IntervalsSource wildcard(const ::java::lang::String &);
            static ::org::apache::lucene::search::intervals::IntervalsSource within(const ::org::apache::lucene::search::intervals::IntervalsSource &, jint, const ::org::apache::lucene::search::intervals::IntervalsSource &);
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace intervals {
          extern PyType_Def PY_TYPE_DEF(Intervals);
          extern PyTypeObject *PY_TYPE(Intervals);

          class t_Intervals {
          public:
            PyObject_HEAD
            Intervals object;
            static PyObject *wrap_Object(const Intervals&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
