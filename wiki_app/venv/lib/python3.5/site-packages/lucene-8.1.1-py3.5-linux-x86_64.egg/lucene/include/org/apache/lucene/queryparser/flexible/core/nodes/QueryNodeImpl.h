#ifndef org_apache_lucene_queryparser_flexible_core_nodes_QueryNodeImpl_H
#define org_apache_lucene_queryparser_flexible_core_nodes_QueryNodeImpl_H

#include "java/lang/Object.h"

namespace java {
  namespace util {
    class List;
    class Map;
  }
  namespace lang {
    class CloneNotSupportedException;
    class String;
    class Class;
    class Cloneable;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              class QueryNode;
            }
          }
        }
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              class QueryNodeImpl : public ::java::lang::Object {
               public:
                enum {
                  mid_init$_8e1955e8a9db094a,
                  mid_add_9d6f77802c55d31e,
                  mid_add_3177931bbb9ac1c4,
                  mid_clone_713b2926f4d8b767,
                  mid_cloneTree_713b2926f4d8b767,
                  mid_containsTag_98daff2c4e381e5e,
                  mid_getChildren_3ca2fd68c33ee839,
                  mid_getParent_713b2926f4d8b767,
                  mid_getTag_9c642d24509c159e,
                  mid_getTagMap_776657198fbc9f41,
                  mid_isLeaf_b61c635e27ed4ce7,
                  mid_removeChildren_3177931bbb9ac1c4,
                  mid_removeFromParent_8e1955e8a9db094a,
                  mid_set_9d6f77802c55d31e,
                  mid_setTag_8a8462fe2c1cbfc0,
                  mid_toString_a59eabb26a802fa9,
                  mid_unsetTag_f23cb8ed8bef391c,
                  mid_setLeaf_cfd4ba314e3c83fb,
                  mid_isRoot_b61c635e27ed4ce7,
                  mid_isDefaultField_298703078a221be0,
                  mid_allocate_8e1955e8a9db094a,
                  max_mid
                };

                static ::java::lang::Class *class$;
                static jmethodID *mids$;
                static bool live$;
                static jclass initializeClass(bool);

                explicit QueryNodeImpl(jobject obj) : ::java::lang::Object(obj) {
                  if (obj != NULL && mids$ == NULL)
                    env->getClass(initializeClass);
                }
                QueryNodeImpl(const QueryNodeImpl& obj) : ::java::lang::Object(obj) {}

                static ::java::lang::String *PLAINTEXT_FIELD_NAME;

                QueryNodeImpl();

                void add(const ::java::util::List &) const;
                void add(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode &) const;
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode clone() const;
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode cloneTree() const;
                jboolean containsTag(const ::java::lang::String &) const;
                ::java::util::List getChildren() const;
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode getParent() const;
                ::java::lang::Object getTag(const ::java::lang::String &) const;
                ::java::util::Map getTagMap() const;
                jboolean isLeaf() const;
                void removeChildren(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode &) const;
                void removeFromParent() const;
                void set(const ::java::util::List &) const;
                void setTag(const ::java::lang::String &, const ::java::lang::Object &) const;
                ::java::lang::String toString() const;
                void unsetTag(const ::java::lang::String &) const;
              };
            }
          }
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              extern PyType_Def PY_TYPE_DEF(QueryNodeImpl);
              extern PyTypeObject *PY_TYPE(QueryNodeImpl);

              class t_QueryNodeImpl {
              public:
                PyObject_HEAD
                QueryNodeImpl object;
                static PyObject *wrap_Object(const QueryNodeImpl&);
                static PyObject *wrap_jobject(const jobject&);
                static void install(PyObject *module);
                static void initialize(PyObject *module);
              };
            }
          }
        }
      }
    }
  }
}

#endif
