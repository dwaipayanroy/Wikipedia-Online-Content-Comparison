#ifndef org_apache_lucene_analysis_util_OpenStringBuilder_H
#define org_apache_lucene_analysis_util_OpenStringBuilder_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Class;
    class String;
    class CharSequence;
    class Appendable;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          class OpenStringBuilder;
        }
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          class OpenStringBuilder : public ::java::lang::Object {
           public:
            enum {
              mid_init$_8e1955e8a9db094a,
              mid_init$_36df8fa8e39fb5cc,
              mid_init$_6b7066afc61de1a9,
              mid_append_99d23c5ce518f9e5,
              mid_append_863be4fad7cd91ed,
              mid_append_9c0752b56bbf0738,
              mid_capacity_ebe7ab370a509c13,
              mid_charAt_cb77cd15fd3c4542,
              mid_flush_8e1955e8a9db094a,
              mid_getArray_524cd17fedb51d3c,
              mid_length_ebe7ab370a509c13,
              mid_reserve_36df8fa8e39fb5cc,
              mid_reset_8e1955e8a9db094a,
              mid_set_6b7066afc61de1a9,
              mid_setCharAt_caf4d05dfcaf07c9,
              mid_setLength_36df8fa8e39fb5cc,
              mid_size_ebe7ab370a509c13,
              mid_subSequence_2ce1d56f2beed3ed,
              mid_toCharArray_524cd17fedb51d3c,
              mid_toString_a59eabb26a802fa9,
              mid_unsafeWrite_9ce3c86676edc32d,
              mid_unsafeWrite_36df8fa8e39fb5cc,
              mid_unsafeWrite_ea931aae960c632d,
              mid_write_430360821bfbd749,
              mid_write_f23cb8ed8bef391c,
              mid_write_82507ab0b960a605,
              mid_write_9ce3c86676edc32d,
              mid_write_36df8fa8e39fb5cc,
              mid_write_ea931aae960c632d,
              mid_resize_36df8fa8e39fb5cc,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit OpenStringBuilder(jobject obj) : ::java::lang::Object(obj) {
              if (obj != NULL && mids$ == NULL)
                env->getClass(initializeClass);
            }
            OpenStringBuilder(const OpenStringBuilder& obj) : ::java::lang::Object(obj) {}

            OpenStringBuilder();
            OpenStringBuilder(jint);
            OpenStringBuilder(const JArray< jchar > &, jint);

            ::java::lang::Appendable append(jchar) const;
            ::java::lang::Appendable append(const ::java::lang::CharSequence &) const;
            ::java::lang::Appendable append(const ::java::lang::CharSequence &, jint, jint) const;
            jint capacity() const;
            jchar charAt(jint) const;
            void flush() const;
            JArray< jchar > getArray() const;
            jint length() const;
            void reserve(jint) const;
            void reset() const;
            void set(const JArray< jchar > &, jint) const;
            void setCharAt(jint, jchar) const;
            void setLength(jint) const;
            jint size() const;
            ::java::lang::CharSequence subSequence(jint, jint) const;
            JArray< jchar > toCharArray() const;
            ::java::lang::String toString() const;
            void unsafeWrite(jchar) const;
            void unsafeWrite(jint) const;
            void unsafeWrite(const JArray< jchar > &, jint, jint) const;
            void write(const JArray< jchar > &) const;
            void write(const ::java::lang::String &) const;
            void write(const OpenStringBuilder &) const;
            void write(jchar) const;
            void write(jint) const;
            void write(const JArray< jchar > &, jint, jint) const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          extern PyType_Def PY_TYPE_DEF(OpenStringBuilder);
          extern PyTypeObject *PY_TYPE(OpenStringBuilder);

          class t_OpenStringBuilder {
          public:
            PyObject_HEAD
            OpenStringBuilder object;
            static PyObject *wrap_Object(const OpenStringBuilder&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
