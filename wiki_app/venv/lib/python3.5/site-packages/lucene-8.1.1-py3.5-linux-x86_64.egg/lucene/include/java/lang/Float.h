#ifndef java_lang_Float_H
#define java_lang_Float_H

#include "java/lang/Number.h"

namespace java {
  namespace lang {
    class Object;
    class Comparable;
    class Float;
    class NumberFormatException;
    class Class;
    class String;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class Float : public ::java::lang::Number {
     public:
      enum {
        mid_init$_f23cb8ed8bef391c,
        mid_init$_c3a3feb3c744702e,
        mid_init$_87f6151add653f41,
        mid_byteValue_05e841c8d0c07537,
        mid_compare_098b617371c983d7,
        mid_compareTo_ea38eddcd5875ef0,
        mid_doubleValue_dbe9ce177340961e,
        mid_equals_95c645439e1de637,
        mid_floatToIntBits_7cc325862d987e5b,
        mid_floatToRawIntBits_7cc325862d987e5b,
        mid_floatValue_9c0456e344056ea9,
        mid_hashCode_ebe7ab370a509c13,
        mid_hashCode_7cc325862d987e5b,
        mid_intBitsToFloat_528d7f9c7f4811ad,
        mid_intValue_ebe7ab370a509c13,
        mid_isFinite_6ce7419101a0a193,
        mid_isInfinite_b61c635e27ed4ce7,
        mid_isInfinite_6ce7419101a0a193,
        mid_isNaN_b61c635e27ed4ce7,
        mid_isNaN_6ce7419101a0a193,
        mid_longValue_e0866fd7ad03cc05,
        mid_max_6cff9b7480ecbb8a,
        mid_min_6cff9b7480ecbb8a,
        mid_parseFloat_61992fa68e06c8d4,
        mid_shortValue_ca93f121c262a7d3,
        mid_sum_6cff9b7480ecbb8a,
        mid_toHexString_224101a44987a135,
        mid_toString_a59eabb26a802fa9,
        mid_toString_224101a44987a135,
        mid_valueOf_a64ab76b42a047ff,
        mid_valueOf_e61c184c278cbb95,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Float(jobject obj) : ::java::lang::Number(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      Float(const Float& obj) : ::java::lang::Number(obj) {}

      static jint BYTES;
      static jint MAX_EXPONENT;
      static jfloat MAX_VALUE;
      static jint MIN_EXPONENT;
      static jfloat MIN_NORMAL;
      static jfloat MIN_VALUE;
      static jfloat NEGATIVE_INFINITY;
      static jfloat NaN;
      static jfloat POSITIVE_INFINITY;
      static jint SIZE;
      static ::java::lang::Class *TYPE;

      Float(const ::java::lang::String &);
      Float(jdouble);
      Float(jfloat);

      jbyte byteValue() const;
      static jint compare(jfloat, jfloat);
      jint compareTo(const Float &) const;
      jdouble doubleValue() const;
      jboolean equals(const ::java::lang::Object &) const;
      static jint floatToIntBits(jfloat);
      static jint floatToRawIntBits(jfloat);
      jfloat floatValue() const;
      jint hashCode() const;
      static jint hashCode(jfloat);
      static jfloat intBitsToFloat(jint);
      jint intValue() const;
      static jboolean isFinite(jfloat);
      jboolean isInfinite() const;
      static jboolean isInfinite(jfloat);
      jboolean isNaN() const;
      static jboolean isNaN(jfloat);
      jlong longValue() const;
      static jfloat max$(jfloat, jfloat);
      static jfloat min$(jfloat, jfloat);
      static jfloat parseFloat(const ::java::lang::String &);
      jshort shortValue() const;
      static jfloat sum(jfloat, jfloat);
      static ::java::lang::String toHexString(jfloat);
      ::java::lang::String toString() const;
      static ::java::lang::String toString(jfloat);
      static Float valueOf(const ::java::lang::String &);
      static Float valueOf(jfloat);
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyType_Def PY_TYPE_DEF(Float);
    extern PyTypeObject *PY_TYPE(Float);

    class t_Float {
    public:
      PyObject_HEAD
      Float object;
      static PyObject *wrap_Object(const Float&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
