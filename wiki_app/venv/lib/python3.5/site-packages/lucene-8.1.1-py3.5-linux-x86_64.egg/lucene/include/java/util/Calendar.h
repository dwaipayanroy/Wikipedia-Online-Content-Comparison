#ifndef java_util_Calendar_H
#define java_util_Calendar_H

#include "java/lang/Object.h"

namespace java {
  namespace io {
    class Serializable;
  }
  namespace util {
    class Set;
    class Map;
    class Date;
    class TimeZone;
    class Locale;
    class Calendar;
  }
  namespace lang {
    class Integer;
    class Comparable;
    class String;
    class Class;
    class Cloneable;
  }
}
template<class T> class JArray;

namespace java {
  namespace util {

    class Calendar : public ::java::lang::Object {
     public:
      enum {
        mid_add_ce83a7763fbf1810,
        mid_after_95c645439e1de637,
        mid_before_95c645439e1de637,
        mid_clear_8e1955e8a9db094a,
        mid_clear_36df8fa8e39fb5cc,
        mid_clone_23bf5655193fd7ea,
        mid_compareTo_4c7501cec2696d51,
        mid_equals_95c645439e1de637,
        mid_get_31c387e1be87ebd7,
        mid_getActualMaximum_31c387e1be87ebd7,
        mid_getActualMinimum_31c387e1be87ebd7,
        mid_getAvailableCalendarTypes_b47526fcab3b3190,
        mid_getAvailableLocales_528dd0ed1a43ca66,
        mid_getCalendarType_a59eabb26a802fa9,
        mid_getDisplayName_dc700db4014fbe06,
        mid_getDisplayNames_6fcd3fb91e31e648,
        mid_getFirstDayOfWeek_ebe7ab370a509c13,
        mid_getGreatestMinimum_31c387e1be87ebd7,
        mid_getInstance_539cf5f94b2cc5d9,
        mid_getInstance_acb7ad4b1a373c6c,
        mid_getInstance_13b5b2bc8bb237d1,
        mid_getInstance_4ff63471d0357d7d,
        mid_getLeastMaximum_31c387e1be87ebd7,
        mid_getMaximum_31c387e1be87ebd7,
        mid_getMinimalDaysInFirstWeek_ebe7ab370a509c13,
        mid_getMinimum_31c387e1be87ebd7,
        mid_getTime_496c527c74193a6b,
        mid_getTimeInMillis_e0866fd7ad03cc05,
        mid_getTimeZone_787eb1f05a36b0b4,
        mid_getWeekYear_ebe7ab370a509c13,
        mid_getWeeksInWeekYear_ebe7ab370a509c13,
        mid_hashCode_ebe7ab370a509c13,
        mid_isLenient_b61c635e27ed4ce7,
        mid_isSet_7913d7ee341c2642,
        mid_isWeekDateSupported_b61c635e27ed4ce7,
        mid_roll_1580730e4237d3b7,
        mid_roll_ce83a7763fbf1810,
        mid_set_ce83a7763fbf1810,
        mid_set_c7fb275c723f2af8,
        mid_set_d2a2c71c7f848c20,
        mid_set_cbe1af2f97b5178d,
        mid_setFirstDayOfWeek_36df8fa8e39fb5cc,
        mid_setLenient_cfd4ba314e3c83fb,
        mid_setMinimalDaysInFirstWeek_36df8fa8e39fb5cc,
        mid_setTime_7af06db6dbc908ef,
        mid_setTimeInMillis_d89013dae69b2a92,
        mid_setTimeZone_317811a866c3c9f7,
        mid_setWeekDate_c7fb275c723f2af8,
        mid_toString_a59eabb26a802fa9,
        mid_complete_8e1955e8a9db094a,
        mid_computeTime_8e1955e8a9db094a,
        mid_computeFields_8e1955e8a9db094a,
        mid_internalGet_31c387e1be87ebd7,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Calendar(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      Calendar(const Calendar& obj) : ::java::lang::Object(obj) {}

      static jint ALL_STYLES;
      static jint AM;
      static jint AM_PM;
      static jint APRIL;
      static jint AUGUST;
      static jint DATE;
      static jint DAY_OF_MONTH;
      static jint DAY_OF_WEEK;
      static jint DAY_OF_WEEK_IN_MONTH;
      static jint DAY_OF_YEAR;
      static jint DECEMBER;
      static jint DST_OFFSET;
      static jint ERA;
      static jint FEBRUARY;
      static jint FIELD_COUNT;
      static jint FRIDAY;
      static jint HOUR;
      static jint HOUR_OF_DAY;
      static jint JANUARY;
      static jint JULY;
      static jint JUNE;
      static jint LONG;
      static jint LONG_FORMAT;
      static jint LONG_STANDALONE;
      static jint MARCH;
      static jint MAY;
      static jint MILLISECOND;
      static jint MINUTE;
      static jint MONDAY;
      static jint MONTH;
      static jint NARROW_FORMAT;
      static jint NARROW_STANDALONE;
      static jint NOVEMBER;
      static jint OCTOBER;
      static jint PM;
      static jint SATURDAY;
      static jint SECOND;
      static jint SEPTEMBER;
      static jint SHORT;
      static jint SHORT_FORMAT;
      static jint SHORT_STANDALONE;
      static jint SUNDAY;
      static jint THURSDAY;
      static jint TUESDAY;
      static jint UNDECIMBER;
      static jint WEDNESDAY;
      static jint WEEK_OF_MONTH;
      static jint WEEK_OF_YEAR;
      static jint YEAR;
      static jint ZONE_OFFSET;

      void add(jint, jint) const;
      jboolean after(const ::java::lang::Object &) const;
      jboolean before(const ::java::lang::Object &) const;
      void clear() const;
      void clear(jint) const;
      ::java::lang::Object clone() const;
      jint compareTo(const Calendar &) const;
      jboolean equals(const ::java::lang::Object &) const;
      jint get(jint) const;
      jint getActualMaximum(jint) const;
      jint getActualMinimum(jint) const;
      static ::java::util::Set getAvailableCalendarTypes();
      static JArray< ::java::util::Locale > getAvailableLocales();
      ::java::lang::String getCalendarType() const;
      ::java::lang::String getDisplayName(jint, jint, const ::java::util::Locale &) const;
      ::java::util::Map getDisplayNames(jint, jint, const ::java::util::Locale &) const;
      jint getFirstDayOfWeek() const;
      jint getGreatestMinimum(jint) const;
      static Calendar getInstance();
      static Calendar getInstance(const ::java::util::Locale &);
      static Calendar getInstance(const ::java::util::TimeZone &);
      static Calendar getInstance(const ::java::util::TimeZone &, const ::java::util::Locale &);
      jint getLeastMaximum(jint) const;
      jint getMaximum(jint) const;
      jint getMinimalDaysInFirstWeek() const;
      jint getMinimum(jint) const;
      ::java::util::Date getTime() const;
      jlong getTimeInMillis() const;
      ::java::util::TimeZone getTimeZone() const;
      jint getWeekYear() const;
      jint getWeeksInWeekYear() const;
      jint hashCode() const;
      jboolean isLenient() const;
      jboolean isSet(jint) const;
      jboolean isWeekDateSupported() const;
      void roll(jint, jboolean) const;
      void roll(jint, jint) const;
      void set(jint, jint) const;
      void set(jint, jint, jint) const;
      void set(jint, jint, jint, jint, jint) const;
      void set(jint, jint, jint, jint, jint, jint) const;
      void setFirstDayOfWeek(jint) const;
      void setLenient(jboolean) const;
      void setMinimalDaysInFirstWeek(jint) const;
      void setTime(const ::java::util::Date &) const;
      void setTimeInMillis(jlong) const;
      void setTimeZone(const ::java::util::TimeZone &) const;
      void setWeekDate(jint, jint, jint) const;
      ::java::lang::String toString() const;
    };
  }
}

#include <Python.h>

namespace java {
  namespace util {
    extern PyType_Def PY_TYPE_DEF(Calendar);
    extern PyTypeObject *PY_TYPE(Calendar);

    class t_Calendar {
    public:
      PyObject_HEAD
      Calendar object;
      static PyObject *wrap_Object(const Calendar&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
