#ifndef java_lang_StringBuffer_H
#define java_lang_StringBuffer_H

#include "java/lang/AbstractStringBuilder.h"

namespace java {
  namespace io {
    class Serializable;
  }
  namespace lang {
    class Object;
    class StringBuffer;
    class Class;
    class CharSequence;
    class String;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class StringBuffer : public ::java::lang::AbstractStringBuilder {
     public:
      enum {
        mid_init$_8e1955e8a9db094a,
        mid_init$_f23cb8ed8bef391c,
        mid_init$_36df8fa8e39fb5cc,
        mid_init$_16a385b5c9ec001b,
        mid_append_fbbb808ef277f352,
        mid_append_b612912aded73628,
        mid_append_d80e7a4434022a70,
        mid_append_6b57ae2f7bf5a81b,
        mid_append_4d55f8f158ee547a,
        mid_append_c89bb580fe6f73d0,
        mid_append_d8282866043d1970,
        mid_append_0e5de030edc4d428,
        mid_append_a671aa289be0f4af,
        mid_append_5508f3acadb2510c,
        mid_append_089a6893f53da71c,
        mid_append_10168756ac0080ca,
        mid_append_4430c407dded98bd,
        mid_appendCodePoint_0e5de030edc4d428,
        mid_capacity_ebe7ab370a509c13,
        mid_charAt_cb77cd15fd3c4542,
        mid_codePointAt_31c387e1be87ebd7,
        mid_codePointBefore_31c387e1be87ebd7,
        mid_codePointCount_28fd57ae44f76a2e,
        mid_delete_83efe8dabc0d4dfd,
        mid_deleteCharAt_0e5de030edc4d428,
        mid_ensureCapacity_36df8fa8e39fb5cc,
        mid_getChars_b938b18cf768e5fb,
        mid_indexOf_354c0569c95d5178,
        mid_indexOf_7b98af938793e116,
        mid_insert_6a13b7bdc755edb9,
        mid_insert_91c7692f3b2d30a7,
        mid_insert_154f41a904805db6,
        mid_insert_88c6b3af22156341,
        mid_insert_1c7ae2a00301d6e9,
        mid_insert_8187ee0b3b048183,
        mid_insert_83efe8dabc0d4dfd,
        mid_insert_00e5f0ad73a9ff20,
        mid_insert_54a03aa484c52818,
        mid_insert_d438c90a2f413c6a,
        mid_insert_5fb2e5e088122de3,
        mid_insert_1792d18acc13ad52,
        mid_lastIndexOf_354c0569c95d5178,
        mid_lastIndexOf_7b98af938793e116,
        mid_length_ebe7ab370a509c13,
        mid_offsetByCodePoints_28fd57ae44f76a2e,
        mid_replace_8d3b899ba69bb8ad,
        mid_reverse_0b6ac29e34ece2e2,
        mid_setCharAt_caf4d05dfcaf07c9,
        mid_setLength_36df8fa8e39fb5cc,
        mid_subSequence_2ce1d56f2beed3ed,
        mid_substring_051f7871497adf6a,
        mid_substring_d1f393259271740d,
        mid_toString_a59eabb26a802fa9,
        mid_trimToSize_8e1955e8a9db094a,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit StringBuffer(jobject obj) : ::java::lang::AbstractStringBuilder(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      StringBuffer(const StringBuffer& obj) : ::java::lang::AbstractStringBuilder(obj) {}

      StringBuffer();
      StringBuffer(const ::java::lang::String &);
      StringBuffer(jint);
      StringBuffer(const ::java::lang::CharSequence &);

      StringBuffer append(const StringBuffer &) const;
      StringBuffer append(const JArray< jchar > &) const;
      StringBuffer append(const ::java::lang::String &) const;
      StringBuffer append(jboolean) const;
      StringBuffer append(jchar) const;
      StringBuffer append(jdouble) const;
      StringBuffer append(jfloat) const;
      StringBuffer append(jint) const;
      StringBuffer append(const ::java::lang::CharSequence &) const;
      StringBuffer append(const ::java::lang::Object &) const;
      StringBuffer append(jlong) const;
      StringBuffer append(const JArray< jchar > &, jint, jint) const;
      StringBuffer append(const ::java::lang::CharSequence &, jint, jint) const;
      StringBuffer appendCodePoint(jint) const;
      jint capacity() const;
      jchar charAt(jint) const;
      jint codePointAt(jint) const;
      jint codePointBefore(jint) const;
      jint codePointCount(jint, jint) const;
      StringBuffer delete$(jint, jint) const;
      StringBuffer deleteCharAt(jint) const;
      void ensureCapacity(jint) const;
      void getChars(jint, jint, const JArray< jchar > &, jint) const;
      jint indexOf(const ::java::lang::String &) const;
      jint indexOf(const ::java::lang::String &, jint) const;
      StringBuffer insert(jint, const JArray< jchar > &) const;
      StringBuffer insert(jint, const ::java::lang::String &) const;
      StringBuffer insert(jint, jboolean) const;
      StringBuffer insert(jint, jchar) const;
      StringBuffer insert(jint, jdouble) const;
      StringBuffer insert(jint, jfloat) const;
      StringBuffer insert(jint, jint) const;
      StringBuffer insert(jint, const ::java::lang::CharSequence &) const;
      StringBuffer insert(jint, const ::java::lang::Object &) const;
      StringBuffer insert(jint, jlong) const;
      StringBuffer insert(jint, const JArray< jchar > &, jint, jint) const;
      StringBuffer insert(jint, const ::java::lang::CharSequence &, jint, jint) const;
      jint lastIndexOf(const ::java::lang::String &) const;
      jint lastIndexOf(const ::java::lang::String &, jint) const;
      jint length() const;
      jint offsetByCodePoints(jint, jint) const;
      StringBuffer replace(jint, jint, const ::java::lang::String &) const;
      StringBuffer reverse() const;
      void setCharAt(jint, jchar) const;
      void setLength(jint) const;
      ::java::lang::CharSequence subSequence(jint, jint) const;
      ::java::lang::String substring(jint) const;
      ::java::lang::String substring(jint, jint) const;
      ::java::lang::String toString() const;
      void trimToSize() const;
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyType_Def PY_TYPE_DEF(StringBuffer);
    extern PyTypeObject *PY_TYPE(StringBuffer);

    class t_StringBuffer {
    public:
      PyObject_HEAD
      StringBuffer object;
      static PyObject *wrap_Object(const StringBuffer&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
