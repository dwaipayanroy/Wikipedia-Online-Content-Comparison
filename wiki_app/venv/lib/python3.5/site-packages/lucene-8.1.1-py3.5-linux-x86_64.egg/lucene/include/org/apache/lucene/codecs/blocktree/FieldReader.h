#ifndef org_apache_lucene_codecs_blocktree_FieldReader_H
#define org_apache_lucene_codecs_blocktree_FieldReader_H

#include "org/apache/lucene/index/Terms.h"

namespace java {
  namespace io {
    class IOException;
  }
  namespace util {
    class Collection;
  }
  namespace lang {
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class BytesRef;
        namespace automaton {
          class CompiledAutomaton;
        }
        class Accountable;
      }
      namespace codecs {
        namespace blocktree {
          class Stats;
        }
      }
      namespace index {
        class TermsEnum;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          class FieldReader : public ::org::apache::lucene::index::Terms {
           public:
            enum {
              mid_getChildResources_b7f40aa628426e82,
              mid_getDocCount_ebe7ab370a509c13,
              mid_getMax_74802edf7c1e9c5f,
              mid_getMin_74802edf7c1e9c5f,
              mid_getStats_e44a6d8f148a4ef2,
              mid_getSumDocFreq_e0866fd7ad03cc05,
              mid_getSumTotalTermFreq_e0866fd7ad03cc05,
              mid_hasFreqs_b61c635e27ed4ce7,
              mid_hasOffsets_b61c635e27ed4ce7,
              mid_hasPayloads_b61c635e27ed4ce7,
              mid_hasPositions_b61c635e27ed4ce7,
              mid_intersect_c0786fd528379e80,
              mid_isFstOffHeap_b61c635e27ed4ce7,
              mid_iterator_21ec6ba13963a1be,
              mid_ramBytesUsed_e0866fd7ad03cc05,
              mid_size_e0866fd7ad03cc05,
              mid_toString_a59eabb26a802fa9,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit FieldReader(jobject obj) : ::org::apache::lucene::index::Terms(obj) {
              if (obj != NULL && mids$ == NULL)
                env->getClass(initializeClass);
            }
            FieldReader(const FieldReader& obj) : ::org::apache::lucene::index::Terms(obj) {}

            ::java::util::Collection getChildResources() const;
            jint getDocCount() const;
            ::org::apache::lucene::util::BytesRef getMax() const;
            ::org::apache::lucene::util::BytesRef getMin() const;
            ::org::apache::lucene::codecs::blocktree::Stats getStats() const;
            jlong getSumDocFreq() const;
            jlong getSumTotalTermFreq() const;
            jboolean hasFreqs() const;
            jboolean hasOffsets() const;
            jboolean hasPayloads() const;
            jboolean hasPositions() const;
            ::org::apache::lucene::index::TermsEnum intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton &, const ::org::apache::lucene::util::BytesRef &) const;
            jboolean isFstOffHeap() const;
            ::org::apache::lucene::index::TermsEnum iterator() const;
            jlong ramBytesUsed() const;
            jlong size() const;
            ::java::lang::String toString() const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          extern PyType_Def PY_TYPE_DEF(FieldReader);
          extern PyTypeObject *PY_TYPE(FieldReader);

          class t_FieldReader {
          public:
            PyObject_HEAD
            FieldReader object;
            static PyObject *wrap_Object(const FieldReader&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
