#ifndef java_nio_file_Path_H
#define java_nio_file_Path_H

#include "java/lang/Comparable.h"

namespace java {
  namespace nio {
    namespace file {
      class WatchEvent$Modifier;
      class FileSystem;
      class Path;
      class LinkOption;
      class WatchKey;
      class Watchable;
      class WatchService;
      class WatchEvent$Kind;
    }
  }
  namespace io {
    class IOException;
    class File;
  }
  namespace util {
    class Iterator;
  }
  namespace lang {
    class Iterable;
    class Object;
    class Class;
    class String;
  }
}
template<class T> class JArray;

namespace java {
  namespace nio {
    namespace file {

      class Path : public ::java::lang::Comparable {
       public:
        enum {
          mid_compareTo_517f4cfc942b4dac,
          mid_endsWith_98daff2c4e381e5e,
          mid_endsWith_d9427ee75a1c1e54,
          mid_equals_95c645439e1de637,
          mid_getFileName_dd11e44a41bf403d,
          mid_getFileSystem_c4fd875ac160d032,
          mid_getName_31f8089e1dc32625,
          mid_getNameCount_ebe7ab370a509c13,
          mid_getParent_dd11e44a41bf403d,
          mid_getRoot_dd11e44a41bf403d,
          mid_hashCode_ebe7ab370a509c13,
          mid_isAbsolute_b61c635e27ed4ce7,
          mid_iterator_44488a5d2e640930,
          mid_normalize_dd11e44a41bf403d,
          mid_register_48e4ae6ca3ee4df2,
          mid_register_5549b4575c71b19b,
          mid_relativize_2c827672f053d4c9,
          mid_resolve_33cce107ad546053,
          mid_resolve_2c827672f053d4c9,
          mid_resolveSibling_33cce107ad546053,
          mid_resolveSibling_2c827672f053d4c9,
          mid_startsWith_98daff2c4e381e5e,
          mid_startsWith_d9427ee75a1c1e54,
          mid_subpath_9fc8d6724868aa37,
          mid_toAbsolutePath_dd11e44a41bf403d,
          mid_toFile_e222d7df87a7368c,
          mid_toRealPath_bbf1791c21dda33a,
          mid_toString_a59eabb26a802fa9,
          max_mid
        };

        static ::java::lang::Class *class$;
        static jmethodID *mids$;
        static bool live$;
        static jclass initializeClass(bool);

        explicit Path(jobject obj) : ::java::lang::Comparable(obj) {
          if (obj != NULL && mids$ == NULL)
            env->getClass(initializeClass);
        }
        Path(const Path& obj) : ::java::lang::Comparable(obj) {}

        jint compareTo(const Path &) const;
        jboolean endsWith(const ::java::lang::String &) const;
        jboolean endsWith(const Path &) const;
        jboolean equals(const ::java::lang::Object &) const;
        Path getFileName() const;
        ::java::nio::file::FileSystem getFileSystem() const;
        Path getName(jint) const;
        jint getNameCount() const;
        Path getParent() const;
        Path getRoot() const;
        jint hashCode() const;
        jboolean isAbsolute() const;
        ::java::util::Iterator iterator() const;
        Path normalize() const;
        ::java::nio::file::WatchKey register$(const ::java::nio::file::WatchService &, const JArray< ::java::nio::file::WatchEvent$Kind > &) const;
        ::java::nio::file::WatchKey register$(const ::java::nio::file::WatchService &, const JArray< ::java::nio::file::WatchEvent$Kind > &, const JArray< ::java::nio::file::WatchEvent$Modifier > &) const;
        Path relativize(const Path &) const;
        Path resolve(const ::java::lang::String &) const;
        Path resolve(const Path &) const;
        Path resolveSibling(const ::java::lang::String &) const;
        Path resolveSibling(const Path &) const;
        jboolean startsWith(const ::java::lang::String &) const;
        jboolean startsWith(const Path &) const;
        Path subpath(jint, jint) const;
        Path toAbsolutePath() const;
        ::java::io::File toFile() const;
        Path toRealPath(const JArray< ::java::nio::file::LinkOption > &) const;
        ::java::lang::String toString() const;
      };
    }
  }
}

#include <Python.h>

namespace java {
  namespace nio {
    namespace file {
      extern PyType_Def PY_TYPE_DEF(Path);
      extern PyTypeObject *PY_TYPE(Path);

      class t_Path {
      public:
        PyObject_HEAD
        Path object;
        static PyObject *wrap_Object(const Path&);
        static PyObject *wrap_jobject(const jobject&);
        static void install(PyObject *module);
        static void initialize(PyObject *module);
      };
    }
  }
}

#endif
