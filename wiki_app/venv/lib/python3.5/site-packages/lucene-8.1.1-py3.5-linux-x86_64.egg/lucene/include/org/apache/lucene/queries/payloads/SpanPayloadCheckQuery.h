#ifndef org_apache_lucene_queries_payloads_SpanPayloadCheckQuery_H
#define org_apache_lucene_queries_payloads_SpanPayloadCheckQuery_H

#include "org/apache/lucene/search/spans/SpanQuery.h"

namespace java {
  namespace io {
    class IOException;
  }
  namespace util {
    class List;
  }
  namespace lang {
    class Object;
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class BytesRef;
      }
      namespace index {
        class IndexReader;
      }
      namespace search {
        class Query;
        class ScoreMode;
        class QueryVisitor;
        namespace spans {
          class SpanWeight;
        }
        class IndexSearcher;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {

          class SpanPayloadCheckQuery : public ::org::apache::lucene::search::spans::SpanQuery {
           public:
            enum {
              mid_init$_b68ac8af368bb91d,
              mid_createWeight_bd2039535dd15576,
              mid_equals_95c645439e1de637,
              mid_getField_a59eabb26a802fa9,
              mid_hashCode_ebe7ab370a509c13,
              mid_rewrite_a5e4c2ec6762d247,
              mid_toString_744f4d1a4f853475,
              mid_visit_8d58f89b6b661a18,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit SpanPayloadCheckQuery(jobject obj) : ::org::apache::lucene::search::spans::SpanQuery(obj) {
              if (obj != NULL && mids$ == NULL)
                env->getClass(initializeClass);
            }
            SpanPayloadCheckQuery(const SpanPayloadCheckQuery& obj) : ::org::apache::lucene::search::spans::SpanQuery(obj) {}

            SpanPayloadCheckQuery(const ::org::apache::lucene::search::spans::SpanQuery &, const ::java::util::List &);

            ::org::apache::lucene::search::spans::SpanWeight createWeight(const ::org::apache::lucene::search::IndexSearcher &, const ::org::apache::lucene::search::ScoreMode &, jfloat) const;
            jboolean equals(const ::java::lang::Object &) const;
            ::java::lang::String getField() const;
            jint hashCode() const;
            ::org::apache::lucene::search::Query rewrite(const ::org::apache::lucene::index::IndexReader &) const;
            ::java::lang::String toString(const ::java::lang::String &) const;
            void visit(const ::org::apache::lucene::search::QueryVisitor &) const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {
          extern PyType_Def PY_TYPE_DEF(SpanPayloadCheckQuery);
          extern PyTypeObject *PY_TYPE(SpanPayloadCheckQuery);

          class t_SpanPayloadCheckQuery {
          public:
            PyObject_HEAD
            SpanPayloadCheckQuery object;
            static PyObject *wrap_Object(const SpanPayloadCheckQuery&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
