#ifndef org_apache_lucene_util_BytesRefBuilder_H
#define org_apache_lucene_util_BytesRefBuilder_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Class;
    class CharSequence;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class BytesRef;
        class BytesRefBuilder;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        class BytesRefBuilder : public ::java::lang::Object {
         public:
          enum {
            mid_init$_8e1955e8a9db094a,
            mid_append_e1a9e7b7c7c5c82a,
            mid_append_e94018338d740831,
            mid_append_936db15918436489,
            mid_append_7fc0bf56a271cd51,
            mid_byteAt_ae83efd126ad3cfa,
            mid_bytes_7bddfff143a4e7e0,
            mid_clear_8e1955e8a9db094a,
            mid_copyBytes_e1a9e7b7c7c5c82a,
            mid_copyBytes_e94018338d740831,
            mid_copyBytes_7fc0bf56a271cd51,
            mid_copyChars_16a385b5c9ec001b,
            mid_copyChars_ea931aae960c632d,
            mid_copyChars_5fc921ad3cde8968,
            mid_equals_95c645439e1de637,
            mid_get_74802edf7c1e9c5f,
            mid_grow_36df8fa8e39fb5cc,
            mid_hashCode_ebe7ab370a509c13,
            mid_length_ebe7ab370a509c13,
            mid_setByteAt_037d20ac9fbc00e1,
            mid_setLength_36df8fa8e39fb5cc,
            mid_toBytesRef_74802edf7c1e9c5f,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit BytesRefBuilder(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL && mids$ == NULL)
              env->getClass(initializeClass);
          }
          BytesRefBuilder(const BytesRefBuilder& obj) : ::java::lang::Object(obj) {}

          BytesRefBuilder();

          void append(const ::org::apache::lucene::util::BytesRef &) const;
          void append(const BytesRefBuilder &) const;
          void append(jbyte) const;
          void append(const JArray< jbyte > &, jint, jint) const;
          jbyte byteAt(jint) const;
          JArray< jbyte > bytes() const;
          void clear() const;
          void copyBytes(const ::org::apache::lucene::util::BytesRef &) const;
          void copyBytes(const BytesRefBuilder &) const;
          void copyBytes(const JArray< jbyte > &, jint, jint) const;
          void copyChars(const ::java::lang::CharSequence &) const;
          void copyChars(const JArray< jchar > &, jint, jint) const;
          void copyChars(const ::java::lang::CharSequence &, jint, jint) const;
          jboolean equals(const ::java::lang::Object &) const;
          ::org::apache::lucene::util::BytesRef get() const;
          void grow(jint) const;
          jint hashCode() const;
          jint length() const;
          void setByteAt(jint, jbyte) const;
          void setLength(jint) const;
          ::org::apache::lucene::util::BytesRef toBytesRef() const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        extern PyType_Def PY_TYPE_DEF(BytesRefBuilder);
        extern PyTypeObject *PY_TYPE(BytesRefBuilder);

        class t_BytesRefBuilder {
        public:
          PyObject_HEAD
          BytesRefBuilder object;
          static PyObject *wrap_Object(const BytesRefBuilder&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
