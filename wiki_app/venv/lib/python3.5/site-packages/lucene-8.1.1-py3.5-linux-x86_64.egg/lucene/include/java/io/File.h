#ifndef java_io_File_H
#define java_io_File_H

#include "java/lang/Object.h"

namespace java {
  namespace io {
    class FilenameFilter;
    class FileFilter;
    class Serializable;
    class IOException;
    class File;
  }
  namespace nio {
    namespace file {
      class Path;
    }
  }
  namespace lang {
    class Comparable;
    class String;
    class Class;
  }
}
template<class T> class JArray;

namespace java {
  namespace io {

    class File : public ::java::lang::Object {
     public:
      enum {
        mid_init$_f23cb8ed8bef391c,
        mid_init$_9076831bd07a6ffb,
        mid_init$_d0828f028d0b24e8,
        mid_canExecute_b61c635e27ed4ce7,
        mid_canRead_b61c635e27ed4ce7,
        mid_canWrite_b61c635e27ed4ce7,
        mid_compareTo_6438d753d07903a5,
        mid_createNewFile_b61c635e27ed4ce7,
        mid_createTempFile_3017081717bb320a,
        mid_createTempFile_231ac268a18a940b,
        mid_delete_b61c635e27ed4ce7,
        mid_deleteOnExit_8e1955e8a9db094a,
        mid_equals_95c645439e1de637,
        mid_exists_b61c635e27ed4ce7,
        mid_getAbsoluteFile_e222d7df87a7368c,
        mid_getAbsolutePath_a59eabb26a802fa9,
        mid_getCanonicalFile_e222d7df87a7368c,
        mid_getCanonicalPath_a59eabb26a802fa9,
        mid_getFreeSpace_e0866fd7ad03cc05,
        mid_getName_a59eabb26a802fa9,
        mid_getParent_a59eabb26a802fa9,
        mid_getParentFile_e222d7df87a7368c,
        mid_getPath_a59eabb26a802fa9,
        mid_getTotalSpace_e0866fd7ad03cc05,
        mid_getUsableSpace_e0866fd7ad03cc05,
        mid_hashCode_ebe7ab370a509c13,
        mid_isAbsolute_b61c635e27ed4ce7,
        mid_isDirectory_b61c635e27ed4ce7,
        mid_isFile_b61c635e27ed4ce7,
        mid_isHidden_b61c635e27ed4ce7,
        mid_lastModified_e0866fd7ad03cc05,
        mid_length_e0866fd7ad03cc05,
        mid_list_9b8eef6b66cbb903,
        mid_list_06d95665e253bf60,
        mid_listFiles_425c0adb1c4c7765,
        mid_listFiles_e63bc124ef4517b5,
        mid_listFiles_ded7d46a8aab5b39,
        mid_listRoots_425c0adb1c4c7765,
        mid_mkdir_b61c635e27ed4ce7,
        mid_mkdirs_b61c635e27ed4ce7,
        mid_renameTo_8e712d03937a271c,
        mid_setExecutable_d5ec8d6a9ac1d974,
        mid_setExecutable_6fd37ed443e4ecf7,
        mid_setLastModified_4b99fda22ba175c6,
        mid_setReadOnly_b61c635e27ed4ce7,
        mid_setReadable_d5ec8d6a9ac1d974,
        mid_setReadable_6fd37ed443e4ecf7,
        mid_setWritable_d5ec8d6a9ac1d974,
        mid_setWritable_6fd37ed443e4ecf7,
        mid_toPath_dd11e44a41bf403d,
        mid_toString_a59eabb26a802fa9,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit File(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      File(const File& obj) : ::java::lang::Object(obj) {}

      static ::java::lang::String *pathSeparator;
      static jchar pathSeparatorChar;
      static ::java::lang::String *separator;
      static jchar separatorChar;

      File(const ::java::lang::String &);
      File(const File &, const ::java::lang::String &);
      File(const ::java::lang::String &, const ::java::lang::String &);

      jboolean canExecute() const;
      jboolean canRead() const;
      jboolean canWrite() const;
      jint compareTo(const File &) const;
      jboolean createNewFile() const;
      static File createTempFile(const ::java::lang::String &, const ::java::lang::String &);
      static File createTempFile(const ::java::lang::String &, const ::java::lang::String &, const File &);
      jboolean delete$() const;
      void deleteOnExit() const;
      jboolean equals(const ::java::lang::Object &) const;
      jboolean exists() const;
      File getAbsoluteFile() const;
      ::java::lang::String getAbsolutePath() const;
      File getCanonicalFile() const;
      ::java::lang::String getCanonicalPath() const;
      jlong getFreeSpace() const;
      ::java::lang::String getName() const;
      ::java::lang::String getParent() const;
      File getParentFile() const;
      ::java::lang::String getPath() const;
      jlong getTotalSpace() const;
      jlong getUsableSpace() const;
      jint hashCode() const;
      jboolean isAbsolute() const;
      jboolean isDirectory() const;
      jboolean isFile() const;
      jboolean isHidden() const;
      jlong lastModified() const;
      jlong length() const;
      JArray< ::java::lang::String > list() const;
      JArray< ::java::lang::String > list(const ::java::io::FilenameFilter &) const;
      JArray< File > listFiles() const;
      JArray< File > listFiles(const ::java::io::FileFilter &) const;
      JArray< File > listFiles(const ::java::io::FilenameFilter &) const;
      static JArray< File > listRoots();
      jboolean mkdir() const;
      jboolean mkdirs() const;
      jboolean renameTo(const File &) const;
      jboolean setExecutable(jboolean) const;
      jboolean setExecutable(jboolean, jboolean) const;
      jboolean setLastModified(jlong) const;
      jboolean setReadOnly() const;
      jboolean setReadable(jboolean) const;
      jboolean setReadable(jboolean, jboolean) const;
      jboolean setWritable(jboolean) const;
      jboolean setWritable(jboolean, jboolean) const;
      ::java::nio::file::Path toPath() const;
      ::java::lang::String toString() const;
    };
  }
}

#include <Python.h>

namespace java {
  namespace io {
    extern PyType_Def PY_TYPE_DEF(File);
    extern PyTypeObject *PY_TYPE(File);

    class t_File {
    public:
      PyObject_HEAD
      File object;
      static PyObject *wrap_Object(const File&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
