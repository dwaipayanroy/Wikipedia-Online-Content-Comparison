#ifndef org_apache_lucene_analysis_util_AbstractAnalysisFactory_H
#define org_apache_lucene_analysis_util_AbstractAnalysisFactory_H

#include "java/lang/Object.h"

namespace java {
  namespace util {
    class Set;
    class Map;
    class Collection;
  }
  namespace lang {
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class Version;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          class AbstractAnalysisFactory : public ::java::lang::Object {
           public:
            enum {
              mid_get_7a77e6166c15bc8b,
              mid_get_079c6003ee123e4b,
              mid_get_19912c7dfadb2be6,
              mid_get_7e8ade382d04007e,
              mid_get_ec0cffbd6da19c92,
              mid_getChar_eb0bf1b5d805e177,
              mid_getClassArg_a59eabb26a802fa9,
              mid_getLuceneMatchVersion_96722d4d7fe3eec7,
              mid_getOriginalArgs_776657198fbc9f41,
              mid_getSet_e3aa2db908fa3fa5,
              mid_isExplicitLuceneMatchVersion_b61c635e27ed4ce7,
              mid_require_7a77e6166c15bc8b,
              mid_require_19912c7dfadb2be6,
              mid_require_85464c600b484fba,
              mid_requireChar_3b6b678ef6d63499,
              mid_setExplicitLuceneMatchVersion_cfd4ba314e3c83fb,
              mid_requireInt_40f696ac2094acb8,
              mid_requireBoolean_0d19006c7f5fff90,
              mid_requireFloat_a3e123762dd50e24,
              mid_getPattern_74aa5a4ceece1654,
              mid_getWordSet_b9aac88e66dbe5fb,
              mid_getLines_c1ccdbbed3490755,
              mid_getSnowballWordSet_b9aac88e66dbe5fb,
              mid_splitFileNames_29e3443346ec49fd,
              mid_splitAt_c1a56cbd0b6e2b1a,
              mid_getBoolean_15e112944f337a4d,
              mid_getInt_5572f4752940cfe5,
              mid_getFloat_c20bbc43b1887e47,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit AbstractAnalysisFactory(jobject obj) : ::java::lang::Object(obj) {
              if (obj != NULL && mids$ == NULL)
                env->getClass(initializeClass);
            }
            AbstractAnalysisFactory(const AbstractAnalysisFactory& obj) : ::java::lang::Object(obj) {}

            static ::java::lang::String *LUCENE_MATCH_VERSION_PARAM;

            ::java::lang::String get(const ::java::util::Map &, const ::java::lang::String &) const;
            ::java::lang::String get(const ::java::util::Map &, const ::java::lang::String &, const ::java::lang::String &) const;
            ::java::lang::String get(const ::java::util::Map &, const ::java::lang::String &, const ::java::util::Collection &) const;
            ::java::lang::String get(const ::java::util::Map &, const ::java::lang::String &, const ::java::util::Collection &, const ::java::lang::String &) const;
            ::java::lang::String get(const ::java::util::Map &, const ::java::lang::String &, const ::java::util::Collection &, const ::java::lang::String &, jboolean) const;
            jchar getChar(const ::java::util::Map &, const ::java::lang::String &, jchar) const;
            ::java::lang::String getClassArg() const;
            ::org::apache::lucene::util::Version getLuceneMatchVersion() const;
            ::java::util::Map getOriginalArgs() const;
            ::java::util::Set getSet(const ::java::util::Map &, const ::java::lang::String &) const;
            jboolean isExplicitLuceneMatchVersion() const;
            ::java::lang::String require(const ::java::util::Map &, const ::java::lang::String &) const;
            ::java::lang::String require(const ::java::util::Map &, const ::java::lang::String &, const ::java::util::Collection &) const;
            ::java::lang::String require(const ::java::util::Map &, const ::java::lang::String &, const ::java::util::Collection &, jboolean) const;
            jchar requireChar(const ::java::util::Map &, const ::java::lang::String &) const;
            void setExplicitLuceneMatchVersion(jboolean) const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          extern PyType_Def PY_TYPE_DEF(AbstractAnalysisFactory);
          extern PyTypeObject *PY_TYPE(AbstractAnalysisFactory);

          class t_AbstractAnalysisFactory {
          public:
            PyObject_HEAD
            AbstractAnalysisFactory object;
            static PyObject *wrap_Object(const AbstractAnalysisFactory&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
