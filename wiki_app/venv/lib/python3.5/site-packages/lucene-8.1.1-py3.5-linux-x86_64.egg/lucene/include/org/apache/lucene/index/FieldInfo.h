#ifndef org_apache_lucene_index_FieldInfo_H
#define org_apache_lucene_index_FieldInfo_H

#include "java/lang/Object.h"

namespace java {
  namespace util {
    class Map;
  }
  namespace lang {
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        class IndexOptions;
        class DocValuesType;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        class FieldInfo : public ::java::lang::Object {
         public:
          enum {
            mid_init$_d995b8d7f8437cb3,
            mid_attributes_776657198fbc9f41,
            mid_checkConsistency_b61c635e27ed4ce7,
            mid_getAttribute_744f4d1a4f853475,
            mid_getDocValuesGen_e0866fd7ad03cc05,
            mid_getDocValuesType_f5a4ba61cd619f19,
            mid_getIndexOptions_1cbef564c188a819,
            mid_getPointDataDimensionCount_ebe7ab370a509c13,
            mid_getPointIndexDimensionCount_ebe7ab370a509c13,
            mid_getPointNumBytes_ebe7ab370a509c13,
            mid_hasNorms_b61c635e27ed4ce7,
            mid_hasPayloads_b61c635e27ed4ce7,
            mid_hasVectors_b61c635e27ed4ce7,
            mid_isSoftDeletesField_b61c635e27ed4ce7,
            mid_omitsNorms_b61c635e27ed4ce7,
            mid_putAttribute_b7ab710c19669f80,
            mid_setDocValuesType_16c7b9349d025bcd,
            mid_setIndexOptions_4b6b3ca1b5d8d83b,
            mid_setOmitsNorms_8e1955e8a9db094a,
            mid_setPointDimensions_c7fb275c723f2af8,
            max_mid
          };

          enum {
            fid_name,
            fid_number,
            max_fid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static jfieldID *fids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit FieldInfo(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL && mids$ == NULL)
              env->getClass(initializeClass);
          }
          FieldInfo(const FieldInfo& obj) : ::java::lang::Object(obj) {}

          ::java::lang::String _get_name() const;
          jint _get_number() const;

          FieldInfo(const ::java::lang::String &, jint, jboolean, jboolean, jboolean, const ::org::apache::lucene::index::IndexOptions &, const ::org::apache::lucene::index::DocValuesType &, jlong, const ::java::util::Map &, jint, jint, jint, jboolean);

          ::java::util::Map attributes() const;
          jboolean checkConsistency() const;
          ::java::lang::String getAttribute(const ::java::lang::String &) const;
          jlong getDocValuesGen() const;
          ::org::apache::lucene::index::DocValuesType getDocValuesType() const;
          ::org::apache::lucene::index::IndexOptions getIndexOptions() const;
          jint getPointDataDimensionCount() const;
          jint getPointIndexDimensionCount() const;
          jint getPointNumBytes() const;
          jboolean hasNorms() const;
          jboolean hasPayloads() const;
          jboolean hasVectors() const;
          jboolean isSoftDeletesField() const;
          jboolean omitsNorms() const;
          ::java::lang::String putAttribute(const ::java::lang::String &, const ::java::lang::String &) const;
          void setDocValuesType(const ::org::apache::lucene::index::DocValuesType &) const;
          void setIndexOptions(const ::org::apache::lucene::index::IndexOptions &) const;
          void setOmitsNorms() const;
          void setPointDimensions(jint, jint, jint) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        extern PyType_Def PY_TYPE_DEF(FieldInfo);
        extern PyTypeObject *PY_TYPE(FieldInfo);

        class t_FieldInfo {
        public:
          PyObject_HEAD
          FieldInfo object;
          static PyObject *wrap_Object(const FieldInfo&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
