#ifndef org_antlr_v4_runtime_atn_ParserATNSimulator_H
#define org_antlr_v4_runtime_atn_ParserATNSimulator_H

#include "org/antlr/v4/runtime/atn/ATNSimulator.h"

namespace java {
  namespace lang {
    class String;
    class Class;
  }
}
template<class T> class JArray;

namespace org {
  namespace antlr {
    namespace v4 {
      namespace runtime {
        namespace atn {

          class ParserATNSimulator : public ::org::antlr::v4::runtime::atn::ATNSimulator {
           public:
            enum {
              mid_clearDFA_8e1955e8a9db094a,
              mid_getRuleName_051f7871497adf6a,
              mid_getTokenName_051f7871497adf6a,
              mid_reset_8e1955e8a9db094a,
              mid_computeReachSet_bf024d6d67dd159e,
              mid_evalSemanticContext_daa3cd76b1655587,
              mid_evalSemanticContext_92b1ae665799b0ff,
              mid_execATN_0c7d2b2c25ddff31,
              mid_predicateDFAState_625123f77a33a523,
              mid_execATNWithFullContext_d8f00e29182f078c,
              mid_removeAllConfigsNotInRuleStopState_f288a38a9be51cc5,
              mid_computeStartState_100b0b193d2e34c3,
              mid_applyPrecedenceFilter_3ad1ab5742c96915,
              mid_getReachableTarget_ab94747f4a196e35,
              mid_getPredsForAmbigAlts_ea8d374b1a8cfab5,
              mid_getPredicatePredictions_442b7577d2c534e0,
              mid_getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule_cee536e6c1733c8a,
              mid_getAltThatFinishedDecisionEntryRule_99513c114b8bb5d2,
              mid_splitAccordingToSemanticValidity_9b0d7ce5af14717c,
              mid_closureCheckingStopState_43e40fd1e21f58d0,
              mid_closure__43e40fd1e21f58d0,
              mid_getEpsilonTarget_7ac5d58d333977d5,
              mid_actionTransition_6e6e3c1d26e33430,
              mid_predTransition_3b530695ab8920d5,
              mid_ruleTransition_8d4c3738ac7ef3ad,
              mid_getConflictingAlts_f79fbcce7564b7ce,
              mid_getConflictingAltsOrUniqueAlt_f79fbcce7564b7ce,
              mid_noViableAlt_a9c7a98c29d9de27,
              mid_getUniqueAlt_99513c114b8bb5d2,
              mid_addDFAEdge_66f3b0c5997bcae0,
              mid_addDFAState_17caf2567da8ca52,
              mid_reportAttemptingFullContext_28bda71b4daa4247,
              mid_reportContextSensitivity_388f67c9e282f284,
              mid_getExistingTargetState_4b6da7db87dda788,
              mid_computeTargetState_45864632946d9cdc,
              mid_reportAmbiguity_09a2b491a0093b59,
              mid_closure_3d2d7e1435000769,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit ParserATNSimulator(jobject obj) : ::org::antlr::v4::runtime::atn::ATNSimulator(obj) {
              if (obj != NULL && mids$ == NULL)
                env->getClass(initializeClass);
            }
            ParserATNSimulator(const ParserATNSimulator& obj) : ::org::antlr::v4::runtime::atn::ATNSimulator(obj) {}

            static jboolean debug;
            static jboolean debug_list_atn_decisions;
            static jboolean dfa_debug;
            static jboolean retry_debug;

            void clearDFA() const;
            ::java::lang::String getRuleName(jint) const;
            ::java::lang::String getTokenName(jint) const;
            void reset() const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace antlr {
    namespace v4 {
      namespace runtime {
        namespace atn {
          extern PyType_Def PY_TYPE_DEF(ParserATNSimulator);
          extern PyTypeObject *PY_TYPE(ParserATNSimulator);

          class t_ParserATNSimulator {
          public:
            PyObject_HEAD
            ParserATNSimulator object;
            static PyObject *wrap_Object(const ParserATNSimulator&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
