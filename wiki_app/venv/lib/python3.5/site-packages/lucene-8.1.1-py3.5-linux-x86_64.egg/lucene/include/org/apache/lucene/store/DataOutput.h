#ifndef org_apache_lucene_store_DataOutput_H
#define org_apache_lucene_store_DataOutput_H

#include "java/lang/Object.h"

namespace java {
  namespace io {
    class IOException;
  }
  namespace util {
    class Set;
    class Map;
  }
  namespace lang {
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        class DataInput;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        class DataOutput : public ::java::lang::Object {
         public:
          enum {
            mid_init$_8e1955e8a9db094a,
            mid_copyBytes_9b97fc11233ebdd1,
            mid_writeByte_936db15918436489,
            mid_writeBytes_e71b2fd94d730932,
            mid_writeBytes_7fc0bf56a271cd51,
            mid_writeInt_36df8fa8e39fb5cc,
            mid_writeLong_d89013dae69b2a92,
            mid_writeMapOfStrings_c0bf7b502c3283d5,
            mid_writeSetOfStrings_88495d2877cac0c5,
            mid_writeShort_1626b38adb7a8f80,
            mid_writeString_f23cb8ed8bef391c,
            mid_writeVInt_36df8fa8e39fb5cc,
            mid_writeVLong_d89013dae69b2a92,
            mid_writeZInt_36df8fa8e39fb5cc,
            mid_writeZLong_d89013dae69b2a92,
            max_mid
          };

          static ::java::lang::Class *class$;
          static jmethodID *mids$;
          static bool live$;
          static jclass initializeClass(bool);

          explicit DataOutput(jobject obj) : ::java::lang::Object(obj) {
            if (obj != NULL && mids$ == NULL)
              env->getClass(initializeClass);
          }
          DataOutput(const DataOutput& obj) : ::java::lang::Object(obj) {}

          DataOutput();

          void copyBytes(const ::org::apache::lucene::store::DataInput &, jlong) const;
          void writeByte(jbyte) const;
          void writeBytes(const JArray< jbyte > &, jint) const;
          void writeBytes(const JArray< jbyte > &, jint, jint) const;
          void writeInt(jint) const;
          void writeLong(jlong) const;
          void writeMapOfStrings(const ::java::util::Map &) const;
          void writeSetOfStrings(const ::java::util::Set &) const;
          void writeShort(jshort) const;
          void writeString(const ::java::lang::String &) const;
          void writeVInt(jint) const;
          void writeVLong(jlong) const;
          void writeZInt(jint) const;
          void writeZLong(jlong) const;
        };
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        extern PyType_Def PY_TYPE_DEF(DataOutput);
        extern PyTypeObject *PY_TYPE(DataOutput);

        class t_DataOutput {
        public:
          PyObject_HEAD
          DataOutput object;
          static PyObject *wrap_Object(const DataOutput&);
          static PyObject *wrap_jobject(const jobject&);
          static void install(PyObject *module);
          static void initialize(PyObject *module);
        };
      }
    }
  }
}

#endif
