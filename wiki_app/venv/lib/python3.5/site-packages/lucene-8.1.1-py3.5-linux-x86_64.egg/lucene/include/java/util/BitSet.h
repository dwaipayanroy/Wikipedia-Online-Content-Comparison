#ifndef java_util_BitSet_H
#define java_util_BitSet_H

#include "java/lang/Object.h"

namespace java {
  namespace io {
    class Serializable;
  }
  namespace util {
    class BitSet;
  }
  namespace lang {
    class String;
    class Class;
    class Cloneable;
  }
}
template<class T> class JArray;

namespace java {
  namespace util {

    class BitSet : public ::java::lang::Object {
     public:
      enum {
        mid_init$_8e1955e8a9db094a,
        mid_init$_36df8fa8e39fb5cc,
        mid_and_579790bc7c0b3b1d,
        mid_andNot_579790bc7c0b3b1d,
        mid_cardinality_ebe7ab370a509c13,
        mid_clear_8e1955e8a9db094a,
        mid_clear_36df8fa8e39fb5cc,
        mid_clear_ce83a7763fbf1810,
        mid_clone_23bf5655193fd7ea,
        mid_equals_95c645439e1de637,
        mid_flip_36df8fa8e39fb5cc,
        mid_flip_ce83a7763fbf1810,
        mid_get_7913d7ee341c2642,
        mid_get_f8d9cd03c10784d0,
        mid_hashCode_ebe7ab370a509c13,
        mid_intersects_b39a93ad554ea0f6,
        mid_isEmpty_b61c635e27ed4ce7,
        mid_length_ebe7ab370a509c13,
        mid_nextClearBit_31c387e1be87ebd7,
        mid_nextSetBit_31c387e1be87ebd7,
        mid_or_579790bc7c0b3b1d,
        mid_previousClearBit_31c387e1be87ebd7,
        mid_previousSetBit_31c387e1be87ebd7,
        mid_set_36df8fa8e39fb5cc,
        mid_set_1580730e4237d3b7,
        mid_set_ce83a7763fbf1810,
        mid_set_9e6cb869fc2c724e,
        mid_size_ebe7ab370a509c13,
        mid_toByteArray_7bddfff143a4e7e0,
        mid_toLongArray_439c0db87e4d0b90,
        mid_toString_a59eabb26a802fa9,
        mid_valueOf_3a020e2de888a713,
        mid_valueOf_06c14b32f5a1779d,
        mid_xor_579790bc7c0b3b1d,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit BitSet(jobject obj) : ::java::lang::Object(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      BitSet(const BitSet& obj) : ::java::lang::Object(obj) {}

      BitSet();
      BitSet(jint);

      void and$(const BitSet &) const;
      void andNot(const BitSet &) const;
      jint cardinality() const;
      void clear() const;
      void clear(jint) const;
      void clear(jint, jint) const;
      ::java::lang::Object clone() const;
      jboolean equals(const ::java::lang::Object &) const;
      void flip(jint) const;
      void flip(jint, jint) const;
      jboolean get(jint) const;
      BitSet get(jint, jint) const;
      jint hashCode() const;
      jboolean intersects(const BitSet &) const;
      jboolean isEmpty() const;
      jint length() const;
      jint nextClearBit(jint) const;
      jint nextSetBit(jint) const;
      void or$(const BitSet &) const;
      jint previousClearBit(jint) const;
      jint previousSetBit(jint) const;
      void set(jint) const;
      void set(jint, jboolean) const;
      void set(jint, jint) const;
      void set(jint, jint, jboolean) const;
      jint size() const;
      JArray< jbyte > toByteArray() const;
      JArray< jlong > toLongArray() const;
      ::java::lang::String toString() const;
      static BitSet valueOf(const JArray< jbyte > &);
      static BitSet valueOf(const JArray< jlong > &);
      void xor$(const BitSet &) const;
    };
  }
}

#include <Python.h>

namespace java {
  namespace util {
    extern PyType_Def PY_TYPE_DEF(BitSet);
    extern PyTypeObject *PY_TYPE(BitSet);

    class t_BitSet {
    public:
      PyObject_HEAD
      BitSet object;
      static PyObject *wrap_Object(const BitSet&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
