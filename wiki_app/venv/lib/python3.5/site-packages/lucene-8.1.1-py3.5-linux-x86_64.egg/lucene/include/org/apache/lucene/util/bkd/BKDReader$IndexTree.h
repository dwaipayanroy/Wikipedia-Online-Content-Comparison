#ifndef org_apache_lucene_util_bkd_BKDReader$IndexTree_H
#define org_apache_lucene_util_bkd_BKDReader$IndexTree_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class Class;
    class Cloneable;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        class BytesRef;
        namespace bkd {
          class BKDReader$IndexTree;
        }
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          class BKDReader$IndexTree : public ::java::lang::Object {
           public:
            enum {
              mid_clone_899bd2434b5e3e45,
              mid_getLeafBlockFP_e0866fd7ad03cc05,
              mid_getNodeID_ebe7ab370a509c13,
              mid_getNumLeaves_ebe7ab370a509c13,
              mid_getSplitDim_ebe7ab370a509c13,
              mid_getSplitDimValue_74802edf7c1e9c5f,
              mid_getSplitPackedValue_7bddfff143a4e7e0,
              mid_isLeafNode_b61c635e27ed4ce7,
              mid_nodeExists_b61c635e27ed4ce7,
              mid_pop_8e1955e8a9db094a,
              mid_pushLeft_8e1955e8a9db094a,
              mid_pushRight_8e1955e8a9db094a,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit BKDReader$IndexTree(jobject obj) : ::java::lang::Object(obj) {
              if (obj != NULL && mids$ == NULL)
                env->getClass(initializeClass);
            }
            BKDReader$IndexTree(const BKDReader$IndexTree& obj) : ::java::lang::Object(obj) {}

            BKDReader$IndexTree clone() const;
            jlong getLeafBlockFP() const;
            jint getNodeID() const;
            jint getNumLeaves() const;
            jint getSplitDim() const;
            ::org::apache::lucene::util::BytesRef getSplitDimValue() const;
            JArray< jbyte > getSplitPackedValue() const;
            jboolean isLeafNode() const;
            jboolean nodeExists() const;
            void pop() const;
            void pushLeft() const;
            void pushRight() const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          extern PyType_Def PY_TYPE_DEF(BKDReader$IndexTree);
          extern PyTypeObject *PY_TYPE(BKDReader$IndexTree);

          class t_BKDReader$IndexTree {
          public:
            PyObject_HEAD
            BKDReader$IndexTree object;
            static PyObject *wrap_Object(const BKDReader$IndexTree&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
