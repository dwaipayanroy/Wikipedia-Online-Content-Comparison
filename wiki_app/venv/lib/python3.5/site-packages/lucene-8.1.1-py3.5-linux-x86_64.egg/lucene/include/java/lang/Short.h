#ifndef java_lang_Short_H
#define java_lang_Short_H

#include "java/lang/Number.h"

namespace java {
  namespace lang {
    class Short;
    class Comparable;
    class String;
    class NumberFormatException;
    class Object;
    class Class;
  }
}
template<class T> class JArray;

namespace java {
  namespace lang {

    class Short : public ::java::lang::Number {
     public:
      enum {
        mid_init$_f23cb8ed8bef391c,
        mid_init$_1626b38adb7a8f80,
        mid_byteValue_05e841c8d0c07537,
        mid_compare_d05854352e9c3a5c,
        mid_compareTo_8f6d7d8e1cc8d417,
        mid_decode_d26f742fd0c253cd,
        mid_doubleValue_dbe9ce177340961e,
        mid_equals_95c645439e1de637,
        mid_floatValue_9c0456e344056ea9,
        mid_hashCode_ebe7ab370a509c13,
        mid_hashCode_0e6056a999dedc6b,
        mid_intValue_ebe7ab370a509c13,
        mid_longValue_e0866fd7ad03cc05,
        mid_parseShort_14e7c310cb3c1321,
        mid_parseShort_65f9b56ca1d10428,
        mid_reverseBytes_ea12bea266b9ff1c,
        mid_shortValue_ca93f121c262a7d3,
        mid_toString_a59eabb26a802fa9,
        mid_toString_c676ea470fdd7dfa,
        mid_toUnsignedInt_0e6056a999dedc6b,
        mid_toUnsignedLong_22ad8ab1f95586fd,
        mid_valueOf_d26f742fd0c253cd,
        mid_valueOf_5b972b8ecd5c44cc,
        mid_valueOf_5604774c4abcc2fb,
        max_mid
      };

      static ::java::lang::Class *class$;
      static jmethodID *mids$;
      static bool live$;
      static jclass initializeClass(bool);

      explicit Short(jobject obj) : ::java::lang::Number(obj) {
        if (obj != NULL && mids$ == NULL)
          env->getClass(initializeClass);
      }
      Short(const Short& obj) : ::java::lang::Number(obj) {}

      static jint BYTES;
      static jshort MAX_VALUE;
      static jshort MIN_VALUE;
      static jint SIZE;
      static ::java::lang::Class *TYPE;

      Short(const ::java::lang::String &);
      Short(jshort);

      jbyte byteValue() const;
      static jint compare(jshort, jshort);
      jint compareTo(const Short &) const;
      static Short decode(const ::java::lang::String &);
      jdouble doubleValue() const;
      jboolean equals(const ::java::lang::Object &) const;
      jfloat floatValue() const;
      jint hashCode() const;
      static jint hashCode(jshort);
      jint intValue() const;
      jlong longValue() const;
      static jshort parseShort(const ::java::lang::String &);
      static jshort parseShort(const ::java::lang::String &, jint);
      static jshort reverseBytes(jshort);
      jshort shortValue() const;
      ::java::lang::String toString() const;
      static ::java::lang::String toString(jshort);
      static jint toUnsignedInt(jshort);
      static jlong toUnsignedLong(jshort);
      static Short valueOf(const ::java::lang::String &);
      static Short valueOf(jshort);
      static Short valueOf(const ::java::lang::String &, jint);
    };
  }
}

#include <Python.h>

namespace java {
  namespace lang {
    extern PyType_Def PY_TYPE_DEF(Short);
    extern PyTypeObject *PY_TYPE(Short);

    class t_Short {
    public:
      PyObject_HEAD
      Short object;
      static PyObject *wrap_Object(const Short&);
      static PyObject *wrap_jobject(const jobject&);
      static void install(PyObject *module);
      static void initialize(PyObject *module);
    };
  }
}

#endif
