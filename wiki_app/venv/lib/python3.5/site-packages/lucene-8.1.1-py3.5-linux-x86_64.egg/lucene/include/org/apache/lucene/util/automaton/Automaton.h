#ifndef org_apache_lucene_util_automaton_Automaton_H
#define org_apache_lucene_util_automaton_Automaton_H

#include "java/lang/Object.h"

namespace java {
  namespace lang {
    class String;
    class Class;
  }
}
namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          class Transition;
          class Automaton;
        }
        class Accountable;
      }
    }
  }
}
template<class T> class JArray;

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          class Automaton : public ::java::lang::Object {
           public:
            enum {
              mid_init$_8e1955e8a9db094a,
              mid_init$_ce83a7763fbf1810,
              mid_addEpsilon_ce83a7763fbf1810,
              mid_addTransition_c7fb275c723f2af8,
              mid_addTransition_2cde0b7e9f13a1a7,
              mid_copy_ad8bc59e71e55088,
              mid_createState_ebe7ab370a509c13,
              mid_finishState_8e1955e8a9db094a,
              mid_getNextTransition_903561cea70ef252,
              mid_getNumStates_ebe7ab370a509c13,
              mid_getNumTransitions_ebe7ab370a509c13,
              mid_getNumTransitions_31c387e1be87ebd7,
              mid_getSortedTransitions_6bde1d4d6425dd0e,
              mid_getTransition_127d7523871a1ef5,
              mid_initTransition_03b6287a93af56c9,
              mid_isAccept_7913d7ee341c2642,
              mid_isDeterministic_b61c635e27ed4ce7,
              mid_ramBytesUsed_e0866fd7ad03cc05,
              mid_setAccept_1580730e4237d3b7,
              mid_step_28fd57ae44f76a2e,
              mid_toDot_a59eabb26a802fa9,
              max_mid
            };

            static ::java::lang::Class *class$;
            static jmethodID *mids$;
            static bool live$;
            static jclass initializeClass(bool);

            explicit Automaton(jobject obj) : ::java::lang::Object(obj) {
              if (obj != NULL && mids$ == NULL)
                env->getClass(initializeClass);
            }
            Automaton(const Automaton& obj) : ::java::lang::Object(obj) {}

            Automaton();
            Automaton(jint, jint);

            void addEpsilon(jint, jint) const;
            void addTransition(jint, jint, jint) const;
            void addTransition(jint, jint, jint, jint) const;
            void copy(const Automaton &) const;
            jint createState() const;
            void finishState() const;
            void getNextTransition(const ::org::apache::lucene::util::automaton::Transition &) const;
            jint getNumStates() const;
            jint getNumTransitions() const;
            jint getNumTransitions(jint) const;
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > getSortedTransitions() const;
            void getTransition(jint, jint, const ::org::apache::lucene::util::automaton::Transition &) const;
            jint initTransition(jint, const ::org::apache::lucene::util::automaton::Transition &) const;
            jboolean isAccept(jint) const;
            jboolean isDeterministic() const;
            jlong ramBytesUsed() const;
            void setAccept(jint, jboolean) const;
            jint step(jint, jint) const;
            ::java::lang::String toDot() const;
          };
        }
      }
    }
  }
}

#include <Python.h>

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          extern PyType_Def PY_TYPE_DEF(Automaton);
          extern PyTypeObject *PY_TYPE(Automaton);

          class t_Automaton {
          public:
            PyObject_HEAD
            Automaton object;
            static PyObject *wrap_Object(const Automaton&);
            static PyObject *wrap_jobject(const jobject&);
            static void install(PyObject *module);
            static void initialize(PyObject *module);
          };
        }
      }
    }
  }
}

#endif
